class Solution {
public:
    bool selfDividing(int n) {
        // string str = to_string(n);
        // for(char ch: str) {
        //     int num = ch - '0';
        //     if( num == 0 || n % num > 0) return false;
        // }
        int temp = n;
        while(temp) {
            if(temp % 10 == 0 || n % (temp % 10) > 0) return false;
            temp /= 10;
        }
        return true;
    }
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int> ans;
        for(int i = left; i < right + 1; i++) if(selfDividing(i)) ans.emplace_back(i);

        return ans;
    }
};

int stringToInteger(string input) {
    return stoi(input);
}

string integerVectorToString(vector<int> list, int length = -1) {
    if (length == -1) {
        length = list.size();
    }

    if (length == 0) {
        return "[]";
    }

    string result;
    for(int index = 0; index < length; index++) {
        int number = list[index];
        result += to_string(number) + ", ";
    }
    return "[" + result.substr(0, result.length() - 2) + "]";
}

int main() {
    string line;
    while (getline(cin, line)) {
        int left = stringToInteger(line);
        getline(cin, line);
        int right = stringToInteger(line);
        
        vector<int> ret = Solution().selfDividingNumbers(left, right);

        string out = integerVectorToString(ret);
        cout << out << endl;
    }
    return 0;
}
