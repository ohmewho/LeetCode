class Solution {
public:
    int solve1(vector<vector<int>>& grid) {
        int ans = 0;
        for (int i = 0; i < grid.size(); i++)
            for (int j = 0; j < grid[i].size(); j++) {
                if (grid[i][j] == 1) {
                    ans += 4;
                    if (i > 0 && grid[i-1][j] == 1) ans -= 2;
                    if (j > 0 && grid[i][j-1] == 1) ans -= 2;
                }
                
            }
        return ans;
    } 
    
    int solve2(vector<vector<int>>& grid) {
        int ans = 0, row = grid.size(), col = grid[0].size();
        int idx = 0;
        for(int r = 0; r < row; r++) {
            for(int c = 0; c < col; c++) {
                if(grid[r][c] == 1) {
                    ans += 4;
                    for(auto [_r, _c] : vector<tuple<int, int>>{{r - 1, c}, {r, c - 1}}) {
                        
                        if(_r >= 0 && _c >= 0 && grid[_r][_c] == 1) {
                            ans -= 2;
                            //printf("idx = %d, r = %d, c = %d, _r = %d, _c = %d\n", ++idx, r, c,  _r, _c);
                        }
                    }
                }
            }
        }

        return ans;
    }         
    int islandPerimeter(vector<vector<int>>& grid) {
        return solve1(grid);
        //return solve2(grid);
    }
};
