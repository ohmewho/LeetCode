/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
typedef struct ListNode* List;

List myKReverse(List head, int k) {


    // int ttl = 0;
    // List prev = head;

    // while(prev) {
    //     ttl++;
    //     prev = prev->next;
    // }

    // if (k <= 1 || ttl < k) return head;
    
    List dummy_head = (List)malloc(sizeof(struct ListNode)), prev, cur, temp;
    dummy_head->next = head;
    prev = dummy_head->next, cur = prev;
    
    int i = 0;
    while(i < k) {
        temp = cur->next;

        cur->next = prev;
        
        prev = cur;
        cur = temp;
        i++;
        //temp = temp->next;
    }
    printf("i is %d.\n", i);
    dummy_head->next->next = cur;
    dummy_head->next = prev;

    List t = dummy_head, ans = t->next;
    free(t);
    printf("Bye\n");
    return ans;

}

struct ListNode* reverseKGroup(struct ListNode* head, int k){

    if(k <= 1) return head;

    List prev = head;
    int ttl = 0;
    while(ttl < k && prev) {
        prev = prev->next;
        ttl++;
    }
    //printf("I am happy here.\n");
    if(ttl != k) return head;
    //printf("I am happy.\n");
    prev = head;
    head = myKReverse(prev, k);

    prev->next = reverseKGroup(prev->next, k);
    //printf("I am here.\n");
    return head;

}
