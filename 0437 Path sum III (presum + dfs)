/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
using UII = unordered_map<int, int>;
class Solution {
public:
    //unordered_map<int, int> sumfreq;
    void presumhelper(TreeNode* root, int targetSum, int currSum, UII& sumfreq, int & ans) {
        if(!root) return;

        currSum += root->val;
        ans += sumfreq[currSum - targetSum];
        
        sumfreq[currSum]++;
        presumhelper(root->left, targetSum, currSum, sumfreq, ans);
        presumhelper(root->right, targetSum, currSum, sumfreq, ans);
        sumfreq[currSum]--;
    }

    int solvepresum(TreeNode* root, int targetSum) {
        UII sumfreq;
        sumfreq[0]++;

        int ans = 0;
        presumhelper(root, targetSum, 0, sumfreq, ans);
        return ans;
    }

    int pathSum(TreeNode* root, int targetSum) {
        return solvepresum(root, targetSum);
    }
};
