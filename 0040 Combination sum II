class Solution {
public:
    vector<vector<int>> ans;
    vector<int> curr;
    void backtracking(vector<int>& candidates, int target, int start_idx) {
        if( target == 0 ) ans.emplace_back(curr);

        if(target < 0 || start_idx == candidates.size()) return;

        for(int i = start_idx; i < candidates.size() && target - candidates[i] >= 0; i++) {
            if( i > start_idx && candidates[i] == candidates[i - 1]) continue;
            
            curr.emplace_back(candidates[i]);
            backtracking(candidates, target - candidates[i], i + 1);    
            curr.pop_back();
            
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        int n = candidates.size();
        backtracking(candidates, target, 0);

        return ans;
    }
};
