class Solution {
public:

    int countOnes(int n) {
        int ones = 0;
        while( n ) {
            ones++;
            n &= (n - 1);
        }

        return ones;
    }
    vector<int> countBits(int num) {
        vector<int> ans(num + 1);
        //for(int i = 0; i < num + 1; i++) ans[i] = __builtin_popcount(i);
        
        //for(int i = 0; i < num + 1; i++ ) ans[i] = countOnes(i);

        //for(int i = 1; i < num + 1; i++) ans[i] = ans[i >> 1] + (i & 1);
        for(int i = 1; i < num + 1; i++) ans[i] = ans[i & (i - 1)] + 1;
        return ans;
    }   
};

int stringToInteger(string input) {
    return stoi(input);
}

string integerVectorToString(vector<int> list, int length = -1) {
    if (length == -1) {
        length = list.size();
    }

    if (length == 0) {
        return "[]";
    }

    string result;
    for(int index = 0; index < length; index++) {
        int number = list[index];
        result += to_string(number) + ", ";
    }
    return "[" + result.substr(0, result.length() - 2) + "]";
}

int main() {
    string line;
    while (getline(cin, line)) {
        int num = stringToInteger(line);
        
        vector<int> ret = Solution().countBits(num);

        string out = integerVectorToString(ret);
        cout << out << endl;
    }
    return 0;
}
