/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* fx, *fy;
    int dx, dy;
    void dfs(TreeNode* root, int value, int curDepth, int& d, TreeNode* &fx) {
        if(root) {
            if(root->val == value) {
                fx = root;
                d =  curDepth - 1;
            }
            else {
               if(root->left) {
                    if(root->left->val == value) {
                        fx = root;
                        d =  curDepth;
                    }
                    else dfs(root->left, value, curDepth + 1, d, fx);
                } 
                if(root->right) {
                    if(root->right->val == value) {
                        fx = root;
                        d = curDepth;
                    }
                    else  dfs(root->right, value, curDepth + 1, d, fx);
                }
            }
            
            
            // else if(root->right) {
            //     if(root->right->val == value) return curDepth;
            //     else return dfs(root->right, value, curDepth + 1);
            // }
            
            // && root->left->val) return curDepth;
            // else if(root->right && root->right->val) return curDepth;
            // else 
        }

    }
    bool isCousins(TreeNode* root, int x, int y) {
        //int dx, dy;
        dfs(root, x, 0, dx, fx);
        dfs(root, y, 0, dy, fy);
        // printf("dx = %d, dy = %d\n", dx, dy);
        // printf("fx = %d, fy = %d\n", fx->val, fy->val);
        return dx == dy && fx != fy;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

TreeNode* stringToTreeNode(string input) {
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    if (!input.size()) {
        return nullptr;
    }

    string item;
    stringstream ss;
    ss.str(input);

    getline(ss, item, ',');
    TreeNode* root = new TreeNode(stoi(item));
    queue<TreeNode*> nodeQueue;
    nodeQueue.push(root);

    while (true) {
        TreeNode* node = nodeQueue.front();
        nodeQueue.pop();

        if (!getline(ss, item, ',')) {
            break;
        }

        trimLeftTrailingSpaces(item);
        if (item != "null") {
            int leftNumber = stoi(item);
            node->left = new TreeNode(leftNumber);
            nodeQueue.push(node->left);
        }

        if (!getline(ss, item, ',')) {
            break;
        }

        trimLeftTrailingSpaces(item);
        if (item != "null") {
            int rightNumber = stoi(item);
            node->right = new TreeNode(rightNumber);
            nodeQueue.push(node->right);
        }
    }
    return root;
}

int stringToInteger(string input) {
    return stoi(input);
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        TreeNode* root = stringToTreeNode(line);
        getline(cin, line);
        int x = stringToInteger(line);
        getline(cin, line);
        int y = stringToInteger(line);
        
        bool ret = Solution().isCousins(root, x, y);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
