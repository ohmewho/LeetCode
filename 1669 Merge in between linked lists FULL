#include <iostream>
#include <vector>
#include <queue> 
#include <algorithm>
#include <sstream>

using namespace std;

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

struct ListNode {
	int val;
	ListNode *next;
	ListNode() : val(0), next(nullptr) {}
	ListNode(int x) : val(x), next(nullptr) {}
	ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
	
	void printList(ListNode* list) {
		int i = 0;
		while(list) {
			if(i) printf(" ");
			printf("%d", list->val);
			list = list->next;
			i++;
		}
		printf("\n");
	}
	
    ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {
        ListNode* head = new ListNode(), *head2 = new ListNode();
        head->next = list1;
        head2->next = list2;
        
        ListNode* first = head->next, *second, *prev = head2;
        
        int i = 0;
        while(i < a - 1) {
        	first = first->next;
        	i++;
		}
		printList(first);
		second = first;
		while(i <= b ) {
			ListNode* temp = second;
			second = second->next;
			if(i >= a)delete temp;
			i++;
		}
		printList(second);
		
		first->next = list2;
		while(prev->next) prev = prev->next;
		prev->next = second;
        
        return head->next;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

ListNode* stringToListNode(string input) {
    // Generate list from the input
    vector<int> list = stringToIntegerVector(input);

    // Now convert that list into linked list
    ListNode* dummyRoot = new ListNode(0);
    ListNode* ptr = dummyRoot;
    for(int item : list) {
        ptr->next = new ListNode(item);
        ptr = ptr->next;
    }
    ptr = dummyRoot->next;
    delete dummyRoot;
    return ptr;
}

int stringToInteger(string input) {
    return stoi(input);
}

string listNodeToString(ListNode* node) {
    if (node == nullptr) {
        return "[]";
    }

    string result;
    while (node) {
        result += to_string(node->val) + ", ";
        node = node->next;
    }
    return "[" + result.substr(0, result.length() - 2) + "]";
}

int main() {
    string line;
    while (getline(cin, line)) {
        ListNode* list1 = stringToListNode(line);
        getline(cin, line);
        int a = stringToInteger(line);
        getline(cin, line);
        int b = stringToInteger(line);
        getline(cin, line);
        ListNode* list2 = stringToListNode(line);
        
        ListNode* ret = Solution().mergeInBetween(list1, a, b, list2);

        string out = listNodeToString(ret);
        cout << out << endl;
    }
    return 0;
}
