class Solution {
public:
    bool backtracking( vector<int>& groups, vector<int>& nums, int average, int idx) {
        if( idx < 0 ) return true;

        int value = nums[idx--];
        for(int i = 0; i < groups.size(); i++) {
            if( groups[i] + value <= average ) {
                groups[i] += value;
                if( backtracking(groups, nums, average, idx) ) return true;
                groups[i] -= value;
            }
            if( groups[i] == 0 ) break;
        }

        return false;
    }

    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum = accumulate(nums.begin(), nums.end(), 0);

        if( sum % k != 0 ) return false;

        int average = sum / k, n = nums.size();

        sort(nums.begin(), nums.end());
        // for(int n: nums) {
        //     printf(" %d \n", n);
        // }

        int idx = n - 1;
        if( nums[idx] > average ) return false;

        while( idx >= 0 && nums[idx] == average ) {
            idx--;
            k--;
        }

        vector<int> groups(k, 0);

        return backtracking(groups, nums, average, idx);
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int stringToInteger(string input) {
    return stoi(input);
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        getline(cin, line);
        int k = stringToInteger(line);
        
        bool ret = Solution().canPartitionKSubsets(nums, k);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
