class Solution {
public:
    vector<vector<int>> ans;

    void bfs(vector<vector<int>>& graph) {
        int n = graph.size();
        queue<int> que;
        que.push(0);
        queue<vector<int>> prev_path;
        prev_path.push({0});

        while( !que.empty() ) {
            
            int node = que.front();
            que.pop();

            vector<int> curr_path = prev_path.front();
            prev_path.pop();

            for(auto neighbor: graph[node] ) {
                
                curr_path.push_back(neighbor);
                if( neighbor == n - 1) {
                    ans.emplace_back(curr_path);
                }
                else {
                    que.push(neighbor);
                    prev_path.push(curr_path);    
                }
                curr_path.pop_back();
            } 
        }
    }

    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        int n = graph.size();

        bfs(graph);

        return ans;
    }
};
