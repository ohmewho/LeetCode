class Solution {
public:
    bool canConstruct(string s, int k) {
        int freq[26] = {0}, left = 0, right = s.length();
        for(char ch: s) freq[ch - 'a']++;
        for(int i = 0; i < 26; i++) {
            if(freq[i] & 1) left++;
        }

        left = max(left, 1);
        return left <= k && k <= right;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int stringToInteger(string input) {
    return stoi(input);
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        getline(cin, line);
        int k = stringToInteger(line);
        
        bool ret = Solution().canConstruct(s, k);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
