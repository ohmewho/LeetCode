class Solution {
public:
    bool isPossible(vector<int>& piles, int h, int speed) {
        int time = 0;
        for(auto p : piles) time += (p - 1) / speed + 1;
        return time <= h;
    }
    int minEatingSpeed(vector<int>& piles, int h) {

        /***
        int ans = 0, low = 1, high = *max_element(piles.begin(), piles.end()), mid;

        //printf("high = %d\n", high);
        while( low <= high ) {
            mid = low + ( high - low ) / 2;
            //printf("mid = %d\n", mid);

            int time = 0;
            for(auto p: piles) {
                time += (p - 1) / mid + 1;
            }
            //printf("mid = %d, time = %d\n", mid, time);
            if(time > h) {
                
                low = mid + 1;
            }
            else {
                ans = mid;
                high = mid - 1;
            }
        }

        return ans;
        ***/

        int low = 1, high = *max_element(piles.begin(), piles.end());

        while( low < high ) {
            int mid = low + (high - low) / 2;
            if( !isPossible(piles, h, mid) ) low = mid + 1;
            else high = mid;
        }
        return low;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> piles = stringToIntegerVector(line);
        getline(cin, line);
        int h = stringToInteger(line);
        
        int ret = Solution().minEatingSpeed(piles, h);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
