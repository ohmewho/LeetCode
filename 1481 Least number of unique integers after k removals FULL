class Solution {
public:
    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {
        map<int, int> freq;
        for(int n: arr) freq[n]++;

        priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int>> > freqnum;
        for(auto [k, v] : freq) {
            freqnum.push({v, k});
        }
        // while (!freqnum.empty()) {
        //     auto p = freqnum.top();
        //     printf("f = %d, n = %d\n", p.first, p.second);
        //     freqnum.pop();
        // }

        while(k - freqnum.top().first >= 0) {
            auto p = freqnum.top();
            k -= p.first;
            freqnum.pop();
        }

        return freqnum.size();
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> arr = stringToIntegerVector(line);
        getline(cin, line);
        int k = stringToInteger(line);
        
        int ret = Solution().findLeastNumOfUniqueInts(arr, k);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
