class Solution {
public:
    bool isAlpha(char ch) {
        return ch >= 'a' && ch <= 'z';
    }
    string reformat(string s) {
        int alphaNum = 0, digitNum = 0;
        string alpha = "", digit = "";
        for(int i = 0; i < s.length(); i++ ) {
            if(isAlpha(s[i])) {
                alphaNum++;
                alpha += s[i];
            }
            else {
                digitNum++;
                digit += s[i];
            }
        }
        string ans = "";
        if(abs(alphaNum - digitNum) > 1) return ans;
        
        int idx = 0, m = alphaNum;
        if(alphaNum < digitNum) {

            ans += digit[idx++];
            m = digit.length();

            while( idx < m) {
                ans += alpha[idx - 1];
                ans += digit[idx];
                idx++;
            }
        }
        else if(alphaNum > digitNum){
            ans += alpha[idx++];
            //m = alpha.length();

            while(idx < m) {
                ans += digit[idx - 1];
                ans += alpha[idx];
                idx++;
            }
        }

        else {
            while(idx < m) {
                ans += alpha[idx];
                ans += digit[idx];
                idx++;
            }
        }

        return ans;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        
        string ret = Solution().reformat(s);

        string out = (ret);
        cout << out << endl;
    }
    return 0;
}
