class Solution {
public:
    string toGoatLatin(string S) {

        unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};

        stringstream ss(S);
        string word, goatword, ans = "";
        
        int i = 0;
        while( ss >> word ) {
            i++;
            int len = word.length();
            if( vowels.find(word[0]) == vowels.end()) {
                
                goatword = word.substr(1, len - 1) + word[0] + "ma" + string(i, 'a');
                //printf("gword = %s\n", goatword.c_str());
                
            }
            else goatword = word + "ma" + string(i, 'a');
            if(i != 1) ans += " ";
            ans += goatword;
        }

        return ans;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string S = stringToString(line);
        
        string ret = Solution().toGoatLatin(S);

        string out = (ret);
        cout << out << endl;
    }
    return 0;
}
