/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    int maxD;

    void bfs(Node* root) {
        queue<Node*> q;
        q.push(root);

        while( !q.empty()) {
            int size = q.size();

            while(size) {
                Node* n = q.front();
                for(auto child: n->children) q.push(child);
                q.pop();
                size--;
            }
            maxD++;
        }
    }

    int maxDepth(Node* root) {
        if(!root) return maxD;
        
        bfs(root);

        return maxD;
    }
};

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        int root = stringToInteger(line);
        
        int ret = Solution().maxDepth(root);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
