class Solution {
public:
    bool check(vector<int>& nums) {
        
        int cnt = 0, n = nums.size();
        for(int i = 0; i < n - 1; i++) {
            if(nums[i] > nums[i + 1]) cnt++;
            if(cnt > 1) return false;
        }

        return cnt == 0 || nums[0] >= nums[n - 1];
//if(is_sorted(nums.begin(), nums.end())) return true;

        // vector<int> alias(nums.begin(), nums.end());
        // sort(alias.begin(), alias.end());
        
        // int n = nums.size();
        // bool ans = false, curr;
        // for( int x = 1; x <= n; x++) {
        //     curr = true;
        //     //printf("x = %d\n", x);
        //     for(int i = 0; i < n; i++) {
        //         //printf("alias[%d] = %d, nums[%d] = %d\n", i, alias[i], (i + x) % n, nums[(i + x) % n]);
        //         if(alias[i] != nums[( i + x) % n]) {
        //             curr = false;
        //             break;
        //         }
        //     }
        //     if(curr) break;
        // }
        // if(curr) ans = true;

        // return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        bool ret = Solution().check(nums);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
