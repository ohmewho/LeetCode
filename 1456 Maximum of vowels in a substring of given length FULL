class Solution {
public:
    bool isVowel(char ch) {
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
    }

    int vowelNum(string s, int start, int end) {
        int ans = 0, n = s.length();
        if(end >= n) end = n - 1;
        for(int i = start; i < end + 1; i++) {
            if(isVowel(s[i])) ans++;
        }
        return ans;
    }
    int maxVowels(string s, int k) {
        int start = 1, n = s.length(), m, curr;

        curr = vowelNum(s, 0, k - 1);
        m = curr;

        while(start <= n - k) {
            
            if(isVowel(s[start - 1])) curr--;
            if(isVowel(s[start + k - 1])) curr++;
            m = max(m, curr);
            //if(m == k) break;
            start++;
            //printf("last = %d, start = %d\n", n - 1, start);
        }

        return m;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        getline(cin, line);
        int k = stringToInteger(line);
        
        int ret = Solution().maxVowels(s, k);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
