class Solution {
public:
    int massage(vector<int>& nums) {
        int n = nums.size();
        if(!n) return 0;
        int dpi0 = 0, dpi1 = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            int temp_dpi0 = max(dpi0, dpi1);
            int temp_dpi1 = dpi0 + nums[i];
            
            dpi0 = temp_dpi0;
            dpi1 = temp_dpi1;
        }
        
        return max(dpi0, dpi1);
    }  
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        int ret = Solution().massage(nums);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
