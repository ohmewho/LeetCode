class Solution {
public:
    void printVec(vector<int> vec) {
        int i = 0; 
        for(int n: vec) {
            if(i) printf(" ");
            printf("%d", n);
            i++;
        }
        printf("\n");
    }
    int maxTurbulenceSize(vector<int>& arr) {

        int n = arr.size(), ans = 1;

        int up = 1, down = 1;
        for(int i = 0; i < n - 1; i++) {
            if(arr[i + 1] > arr[i]) {
                up = down + 1;
                down = 1;
                //printf("up up = %d, down = %d\n", up, down);
            }
            else if(arr[i + 1] < arr[i]) {
                down = up + 1;
                up = 1;
                //printf("down up = %d, down = %d\n", up, down);
            }
            else {
                down = 1;
                up = 1;
            }

            ans = max(ans, max(up, down));
        }

        return ans;

    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> arr = stringToIntegerVector(line);
        
        int ret = Solution().maxTurbulenceSize(arr);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
