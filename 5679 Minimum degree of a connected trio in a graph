class Solution {
public:
    void printGrahp(vector<vector<int>> graph) {
        for(auto n: graph) {
            int i = 0;
            for(auto next: n) {
                if(i) printf(" ");
                printf("%d", next);
                i++;
            }
            printf("\n");
        }
    }
    int minTrioDegree(int n, vector<vector<int>>& edges) {
        vector<vector<bool>> graph(n, vector<bool>(n));
        vector<int> degree(n);
        for(auto e: edges) {
            graph[e[0] - 1][e[1] - 1] = graph[e[1] - 1][e[0] - 1] = true;
            degree[e[0] - 1]++;
            degree[e[1] - 1]++;
        }

        int ans = 1e8;
/***
        int i = 0;
        for(int d: degree) {
            if(i) printf(" ");
            printf("%d", d);
            i++;
        }
        printf("\n");

        printGrahp(graph);
***/
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(!graph[i][j]) continue;
                for(int k = 0; k < n; k++) {
                    if(graph[i][k] && graph[j][k]) {
                        int total = degree[i] + degree[j] + degree[k] - 6;
                        ans = min(ans, total);
                    }
                }
            }
        }

        return ans == 1e8 ? -1: ans;
    }
};
