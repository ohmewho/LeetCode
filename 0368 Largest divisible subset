class Solution {
public:
    vector<int> dynamic(vector<int>& nums) {
        sort(nums.begin(), nums.end());

        int n = nums.size();
        vector<int> dp(n, 1);

        int maxSize = 1, maxVal;
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                if(nums[i] % nums[j] == 0) {
                    dp[i] = max(dp[j] + 1, dp[i]);
                    
                }
            }
            if(dp[i] > maxSize) {
                maxSize = dp[i];
                maxVal = nums[i];
            }
        }
        //printf("maxsize = %d, maxval = %d\n", maxSize, maxVal);

        vector<int> ans;
        for(int i = n - 1; i >= 0; i--) {
            if(dp[i] == maxSize && maxVal % nums[i] == 0) {
                ans.emplace_back(nums[i]);
                maxVal = nums[i];
                maxSize--;
            }
        }

        return ans;
    }

    vector<int> largestDivisibleSubset(vector<int>& nums) {
        return dynamic(nums);
    }
};
