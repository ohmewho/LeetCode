class Solution {
public:
    bool canConvertString(string s, string t, int k) {
        if(s.length() != t.length()) return false;

        int n = s.length(), minstep, maxstep;

        bool ans = true;

/***
        unordered_map<int, int> stepfreq;
        for(int i = 0; i < n; i++) {
            minstep = (t[i] - s[i] + 26) % 26;
            //printf("steps[%d] = %d\n", i, steps[i]);
            stepfreq[minstep]++;
        }
        for(auto [step, freq]: stepfreq) {
            //printf("%d %d\n",step, freq);
            if(step) maxstep = step + 26 * (freq - 1);
            //else maxstep = 0;
            if(maxstep > k) return false;
        }
***/

        int stepfreq[26] = {0};

        //set<int> steps;
        for(int i = 0; i < n; i++) {
            minstep = (t[i] - s[i] + 26) % 26;
            if(minstep) {
                //steps.insert(minstep);
                stepfreq[minstep]++;
            }
        }

        for(int i = 1; i < 26; i++) {

            maxstep = i + 26 * (stepfreq[i] - 1);
            if(maxstep > k) return false;
        }
        return true;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int stringToInteger(string input) {
    return stoi(input);
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        getline(cin, line);
        string t = stringToString(line);
        getline(cin, line);
        int k = stringToInteger(line);
        
        bool ret = Solution().canConvertString(s, t, k);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
