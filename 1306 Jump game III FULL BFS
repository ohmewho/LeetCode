class Solution {
public:

    bool canReach(vector<int>& arr, int start) {
        int n = arr.size();
        queue<int> q{{start}};
        vector<bool> visited(n, false);

        while( !q.empty() ) {
            
            int idx = q.front();
            q.pop();

            if(idx < 0 || idx >= n || visited[idx]) continue;
            visited[idx] = true;
            if( !arr[idx] ) return true;

            q.push( idx - arr[idx]);
            q.push( idx + arr[idx]);
        }

        return false;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int stringToInteger(string input) {
    return stoi(input);
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> arr = stringToIntegerVector(line);
        getline(cin, line);
        int start = stringToInteger(line);
        
        bool ret = Solution().canReach(arr, start);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
