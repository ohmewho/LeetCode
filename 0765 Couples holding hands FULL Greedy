class Solution {
public:
    int minSwapsCouples(vector<int>& row) {
        int n = row.size(), ans = 0;

        for(int i = 0; i < n - 2; i += 2) {
            if(row[i + 1] == (row[i] ^ 1)) continue;
            for( int j = i + 2; j < n; j++) {
                if(row[j] == (row[i] ^ 1)) {
                    //printf("row[%d] = %d, row[%d] = %d\n", i, row[i], j, row[j]);
                    swap(row[i + 1], row[j]);
                    //printf("after row[%d] = %d, row[%d] = %d\n", i + 1, row[i + 1], j, row[j]);
                    ans++;
                    break;
                }
            }
        }

        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> row = stringToIntegerVector(line);
        
        int ret = Solution().minSwapsCouples(row);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
