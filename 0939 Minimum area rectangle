class Solution {
public:
    int hash(int one, int two) {
        return one * 40000 + two;
    }

    int solvebyrow(vector<vector<int>>& points) {
        int ans = INT_MAX;

        map<int, vector<int>> xcrdycrdvec;
        for(auto p: points) xcrdycrdvec[p[0]].emplace_back(p[1]);

        //for(auto [x, yvec]: xcrdycrdvec) printf(" %d \n", x);

        unordered_map<int, int> yhashxcrd;
        for(auto [xcrd, ycrdvec]: xcrdycrdvec) {
            if(ycrdvec.size() < 2) continue;
            sort(ycrdvec.begin(), ycrdvec.end());

            int n = ycrdvec.size();
            for(int i = 0; i < n - 1; i++) {
                for(int j = i + 1; j < n; j++) {
                    int yhash = hash(ycrdvec[i], ycrdvec[j]);
                    if(yhashxcrd.count(yhash)) ans = min(ans, (xcrd - yhashxcrd[yhash]) * (ycrdvec[j] - ycrdvec[i]) );
                    yhashxcrd[yhash] = xcrd;
                }
            }
        }

        return ans == INT_MAX ? 0 : ans;
    }
    
    int solvebydiangonal(vector<vector<int>>& points) {
        int ans = INT_MAX, n = points.size();

        unordered_set<int> pointSet;

        for(auto p: points) pointSet.insert(hash(p[0], p[1]));

        for(int i = 0; i < n - 1; i++) {
            for(int j = i + 1; j < n; j++) {
                if(points[i][0] == points[j][0] || points[i][1] == points[j][1]) continue;
                int x1 = points[i][0], x2 = points[j][0];
                int y1 = points[i][1], y2 = points[j][1];
                if(pointSet.count(hash(x1, y2)) && pointSet.count(hash(x2, y1)) ) \
                ans = min(ans, abs(x1 - x2) * abs(y1 - y2));
            }
        }

        return ans != INT_MAX ? ans : 0;
    }

    int minAreaRect(vector<vector<int>>& points) {
        return solvebyrow(points);
        //return solvebydiangonal(points);
    }
};
