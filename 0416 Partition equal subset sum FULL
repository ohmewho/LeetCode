class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0, maxnum = 0;
        for(int n : nums) {
            sum += n;
            maxnum = max(maxnum, n);
        }

        if( (sum & 1) || maxnum > ( sum >> 1) ) return false;

        int m = nums.size(), n = sum >> 1;
        vector<vector<bool>> dp( m + 1, vector<bool> ( n + 1, false ));

        for(int row = 0; row < m; row++ ) dp[row][0] = true;

        for(int row = 1; row < m + 1; row++) {
            for(int col = 1; col < n + 1; col++) {
                dp[row][col] = dp[row - 1][col];
                if(col >= nums[row - 1]) dp[row][col] = dp[row][col] || dp[row - 1][col - nums[row - 1]];
            }
        }


        return dp[m][n];
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        bool ret = Solution().canPartition(nums);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
