class Solution {
public:
    const int modula = 1e9 + 7;
    int minAbsoluteSumDiff(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size(), maxabs = -1, maxidx;
        vector<int> absolution(n);
        for(int i = 0; i < n; i++) {
            absolution[i] = abs(nums2[i] - nums1[i]);
            if(absolution[i] > maxabs) {
                maxabs = absolution[i];
                maxidx = i;
            }
        }

        //for(auto a: absolution) printf(" %d ", a);
        //printf("%d\n", maxidx);
        for(int n: nums1) absolution[maxidx] = min(abs(n - nums2[maxidx]), absolution[maxidx]);

        long long ans = 0;
        for(int a: absolution) ans += a;
        return ans % modula;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums1 = stringToIntegerVector(line);
        getline(cin, line);
        vector<int> nums2 = stringToIntegerVector(line);
        
        int ret = Solution().minAbsoluteSumDiff(nums1, nums2);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
