class Solution {
public:
    int backpack(vector<int>& baseCosts, vector<int>& toppingCosts, int target) {
        int ttl = accumulate(baseCosts.begin(), baseCosts.end(), 0);
        ttl += accumulate(toppingCosts.begin(), toppingCosts.end(), 0) * 2;

        vector<bool> dp(ttl + 1, false);

        for(int bc: baseCosts) dp[bc] = true;

        for(int tc: toppingCosts) {
            for(int k = 1; k <= 2; k++) {
                for(int cost = ttl; cost >= 0; cost--) {
                    if(cost - tc >= 0) dp[cost] = dp[cost] || dp[cost - tc];
                }
            }
        }

        int maxdiff = INT_MAX, ans;
        for(int i = 1; i < ttl + 1; i++) {
            if(dp[i] && abs(i - target) < maxdiff) {
                ans = i;
                maxdiff = abs(i - target);
            }
        }

        return ans;        
    }

    int closestCost(vector<int>& baseCosts, vector<int>& toppingCosts, int target) {

        return backpack(baseCosts, toppingCosts, target);
    }
};
