class AuthenticationManager {
private:
    int ttl;
    unordered_map<string, int> tknexp;

public:
    AuthenticationManager(int timeToLive) : ttl(timeToLive){

    }
    
    void generate(string tokenId, int currentTime) {
        tknexp[tokenId] = currentTime + ttl;
    }
    
    void renew(string tokenId, int currentTime) {
        if(tknexp.count(tokenId) && tknexp[tokenId] > currentTime) tknexp[tokenId] = currentTime + ttl;
    }
    
    int countUnexpiredTokens(int currentTime) {
        int ans = 0;
        for(auto [_, exp]: tknexp) {
            if(exp > currentTime) ans++;
        }
        return ans;
    }
};

/**
 * Your AuthenticationManager object will be instantiated and called as such:
 * AuthenticationManager* obj = new AuthenticationManager(timeToLive);
 * obj->generate(tokenId,currentTime);
 * obj->renew(tokenId,currentTime);
 * int param_3 = obj->countUnexpiredTokens(currentTime);
 */
