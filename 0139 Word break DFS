class Solution {
public:
    unordered_set<string> word_ust;
    vector<int> memo;
    bool dfs(string s, int start) {

        int n = s.length();

        if(start == n) return true;
        if( memo[start] != -1 ) return memo[start];

        for( int i = start; i < n; i++) {
            string prev = s.substr(start, i - start + 1);
            if( word_ust.find( prev ) != word_ust.end() && dfs(s, i + 1) ) {
                memo[start] = 1;
                return true;
            }
        }
        memo[start] = 0;
        return false;       
    }
    bool wordBreak(string s, vector<string>& wordDict) {
        int n = s.length();
        word_ust = unordered_set<string>(wordDict.begin(), wordDict.end());
        memo = vector<int> (n, -1);

        return dfs(s, 0);

    }
};
