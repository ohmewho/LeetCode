
// class Solution {
// public:
//     int subarrayBitwiseORs(vector<int>& arr) {
//         int n = arr.size();

//         vector<int> dp(n);

//         unordered_set<int> ans(arr.begin(), arr.end());

//         unordered_set<int> prev;
//         prev.insert(arr[0]);

//         unordered_set<int> curr;

//         for(int i = 1; i < n; i++) {
//             //printf("i = %d\n", i);
//             curr.clear();
//             for(int num: prev) {
//                 curr.insert(num | arr[i]);
//                 ans.insert(num | arr[i]);
                
//             }
//             curr.insert(arr[i]);
//             ans.insert(arr[i]);
//             // for(int num: curr) printf(" num = %d ", num);
//             // printf("\n");
//             prev = curr;
            
//             // for(int j = i + 1; j < n; j++) {
//             //     //printf("j = %d, j - cur - 1 = %d\n", j, j - i - 1);
//             //     //dp[i].push_back( dp[i][j - i - 1]|arr[j] );
                
//             //     ans.insert(dp[i]| arr[j]);
//             //     dp[i] = dp[i] |arr[j];
//             // }
//         }

//         return ans.size();
//     }
// };




class Solution {
public:

    void printVec(vector<int> vec) {
        for(int i = 0; i < vec.size(); i++) {
            if(i) printf(" ");
            printf("%d", vec[i]);
        }
        printf("\n");
    }

    int subarrayBitwiseORs(vector<int>& arr) {
        vector<int> alias(arr.begin(), arr.end());
        vector<int> ans;

        ans.emplace_back(arr[0]);

        for(int i = 1; i < arr.size(); i++) {
            //printf("i = %d\n", i);
            ans.emplace_back(arr[i]);
            for(int j = i - 1; j > -1; j--) {
                if( (alias[j] | alias[i]) == alias[j]) break;
                alias[j] |= arr[i];
                ans.emplace_back(alias[j]);
                //printf("i = %d, alias[%d] = %d\n", i, j, alias[j]);
            }
            //printVec(ans);
        }
        sort(ans.begin(), ans.end());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());

        // for(int i = 0; i < arr.size(); ++i){
        //     ans.emplace_back(arr[i]);
        //     for(int j = i - 1; j >= 0; --j){
        //         if((arr[j] | arr[i]) == arr[j]) break;
        //         arr[j] |= arr[i];
        //         ans.emplace_back(arr[j]);
        //     }
        // }
        // sort(ans.begin(), ans.end());
        // ans.erase(unique(ans.begin(), ans.end()), ans.end());
        return ans.size();
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> arr = stringToIntegerVector(line);
        
        int ret = Solution().subarrayBitwiseORs(arr);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
