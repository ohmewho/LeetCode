class Solution {
public:
    int eatenApples(vector<int>& apples, vector<int>& days) {
        int n = apples.size(), ans = 0;

        map<int, int> best2numofapp;

        for(int i = 0; i < n|| !best2numofapp.empty(); i++) {
            while( !best2numofapp.empty() && (*best2numofapp.begin()).first <= i ) best2numofapp.erase(best2numofapp.begin());

            if( i < n && apples[i]) best2numofapp[ i + days[i]] += apples[i];

            if( !best2numofapp.empty() ) {
                ( *best2numofapp.begin() ).second--;
                ans++;
                if( (*best2numofapp.begin()).second < 1 ) best2numofapp.erase(best2numofapp.begin());
            }
         }
        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> apples = stringToIntegerVector(line);
        getline(cin, line);
        vector<int> days = stringToIntegerVector(line);
        
        int ret = Solution().eatenApples(apples, days);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
