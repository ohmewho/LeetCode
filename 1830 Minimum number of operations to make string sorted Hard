class Solution {
private:
    static const int mod = 1e9 + 7;
    using ll = long long;

public:
    int quickmultiply(int x, int y) {
        int ans = 1, mul = x;

        while(y) {
            if(y & 1) ans = (ll)ans * mul % mod;
            mul = (ll)mul * mul % mod;
            y >>= 1;
        }

        return ans;
    }

    int makeStringSorted(string s) {
        int n = s.length();

        vector<int> fac(n + 1), invfac(n + 1);
        fac[0] = invfac[0] = 1;

        for(int i = 1; i < n + 1; i++) {
            fac[i] = (ll)fac[i - 1] * i % mod;
            invfac[i] = quickmultiply(fac[i], mod - 2);
        }

        int freq[26] = {0};
        for(char ch: s) freq[ch - 'a']++;

        int ans = 0;
        for(int i = 0; i < n; i++) {
            int rank = 0;
            for(int j = 0; j < s[i] - 'a'; j++) rank += freq[j];

            int curr = (ll) rank * fac[n - 1 - i] % mod;

            for(int j = 0; j < 26; j++) curr = (ll) curr * invfac[freq[j]] % mod;

            ans = (ans + curr) % mod;
            freq[s[i] - 'a']--;
        }

        return ans;

    }
};
