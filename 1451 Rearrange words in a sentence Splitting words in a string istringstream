#include <iostream>
#include <sstream>
#include <cassert>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

class Solution {
public:
	
    string arrangeWords(string text) {
		
		text[0] = tolower(text[0]);
		istringstream words(text);
		string w;
		
		vector<pair<string, int>> stridx;
		
		int i = 0;
		while(words>> w) {
			stridx.push_back(make_pair(w, i));
			i++;
		}
		
//		for(int i = 0; i < stridx.size(); i++) {
//			printf("i = %d, stridx[i].first = %s, stridx[i].second = %d\n", i, stridx[i].first.c_str(), stridx[i].second);
//		}
		
		sort(stridx.begin(), stridx.end(), [](const pair<string, int>& a, const pair<string, int>& b){
			if(a.first.length() == b.first.length()) return a.second < b.second;
			return a.first.length() < b.first.length();
		});
		
		string ans = "";		
		for(int i = 0; i < stridx.size(); i++) {
			//printf("i = %d, stridx[i].first = %s, stridx[i].second = %d\n", i, stridx[i].first.c_str(), stridx[i].second);
			ans += stridx[i].first + " ";
		}
		
		ans.pop_back();
		ans[0] = toupper(ans[0]);
		
//		for(int i = 0; i < words_vec.size(); i++) {
//			if(i) printf(" ");
//			printf("%s", words_vec[i].c_str());
//		}
//		printf("\n");

		

		
		return ans;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string text = stringToString(line);
        
        string ret = Solution().arrangeWords(text);

        string out = (ret);
        cout << out << endl;
    }
    return 0;
}
