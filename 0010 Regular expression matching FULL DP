class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.length(), n = p.length();
        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));

        dp[0][0] = true;
        for(int col = 1; col < n + 1; col++) {
            dp[0][col] = p[col - 1] == '*' ? dp[0][col - 2] : false;
        }

        for(int row = 1; row < m + 1; row++) {
            for(int col = 1; col < n + 1; col++) {
                if(p[col - 1] == '.' || s[row - 1] == p[col - 1]) dp[row][col] = dp[row - 1][col - 1];
                else {
                    if( p[col - 1] == '*') dp[row][col] = dp[row][col - 2] || ( (s[row - 1] == p[col - 2] || p[col - 2] == '.') && dp[row - 1][col]);
                    else dp[row][col] = false; 
                }
            }
        }

        return dp[m][n];
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        getline(cin, line);
        string p = stringToString(line);
        
        bool ret = Solution().isMatch(s, p);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
