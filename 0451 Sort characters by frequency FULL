class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char, int> charfreq;

        for(char c: s) charfreq[c]++;

        vector<pair<int, char>> vec;
        for(auto [k, v]: charfreq) {
            //printf("%c %d\n", k, v);
            vec.emplace_back(make_pair(v, k));
        }

        sort(vec.begin(), vec.end());

        // for(auto v: vec) {
        //     printf("first = %d, second = %c\n", v.first, v.second);
        // }
        string ans = "";
        for(int i = vec.size() - 1; i >= 0; i--) {
            for(int j = 0; j < vec[i].first; j++) {
                ans += vec[i].second;
            }
        }
        return ans;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        
        string ret = Solution().frequencySort(s);

        string out = (ret);
        cout << out << endl;
    }
    return 0;
}
