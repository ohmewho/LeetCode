class Solution {
public:
    bool kLengthApart(vector<int>& nums, int k) {
        int mini = 1000000;

        int l = 0, r, n = nums.size(), curr;

        while(l < n && nums[l] == 0) l++;
        //printf("l = %d\n", l);
        while(l < n) {
            if(l == n - 1 && nums[l] != 1) break;
            r = l + 1;
            while(r < n && nums[r] != 1) r++;
            if(r == n ) break;
            //printf("l = %d, r = %d\n", l, r);
            curr = r - l - 1;
            mini = min(curr, mini);
            //printf("mini = %d hehe\n", mini);
            l = r;
        }

        //printf("mini = %d\n", mini);
        return mini >= k;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int stringToInteger(string input) {
    return stoi(input);
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        getline(cin, line);
        int k = stringToInteger(line);
        
        bool ret = Solution().kLengthApart(nums, k);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
