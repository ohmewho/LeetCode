#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

class Solution {
private:
	static bool cmp(const vector<int>& lhs, const vector<int> &rhs) {
		
		return lhs[1] > rhs[1];
	}
	
public:
    bool comp(const vector<int>&a, const vector<int> &b) {
        return a[1] > b[1];
    }
    int maximumUnits(vector<vector<int>>& boxTypes, int truckSize) {
        int n = boxTypes.size();
        sort(boxTypes.begin(), boxTypes.end(), cmp);
		
		int count = 0, sum = 0;
		for(int i = 0; i < n; i++) {
			if(count + boxTypes[i][0] <= truckSize) {
				count += boxTypes[i][0];
				sum += boxTypes[i][1] * boxTypes[i][0];
				printf("count = %d, sum = %d\n", count, sum);
			}
			
			else if(count < truckSize) {
				int num = truckSize - count;
				sum += boxTypes[i][1] * ( num );
				break;
			}
			//else break;
		}

        return sum;
    }
};

int main() {
	
	int n, truckSize;
	scanf("%d", &truckSize);
	vector<vector<int>> boxTypes(3, vector<int> (2));
	
	boxTypes = {{5, 10}, {2, 5}, {4, 7}, {3, 9}};
	
	int num = Solution().maximumUnits(boxTypes, truckSize);
	printf("%d\n", num);
	
	return 0;
}
