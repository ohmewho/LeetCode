class Solution {
public:
    using ll = long long ;
    const int modula = 1e9 + 7;
    const int base = 201;

    vector<vector<int>> ans;
    vector<int> curr;
    set<int> st;

    bool check(vector<int> curr) {
        for(int i = 1; i < curr.size(); i++) if(curr[i] < curr[i - 1]) return false;
        return true;
    }

    int getHash( ) {
        ll hash = 0;
        for(int& n: curr) {
            hash = (ll)hash * base % modula + (n + 101);
            hash %= modula;
        }
        return hash;
    }

    vector<vector<int>> findSubsequences(vector<int>& nums) {

        int n = nums.size();
        for(int i = 0; i < (1 << n); i++) {
            if(__builtin_popcount(i) >= 2) {
                curr.clear();
                for(int j = 0; j < nums.size(); j++) {
                    if( (1 << j) & i ) {
                        curr.emplace_back(nums[j]);
                    }
                }
                int hash = getHash();
                if(check(curr) && st.find(hash) == st.end()) {
                    ans.emplace_back(curr);
                    st.insert(hash);
                }
            }
        }
        return ans;
    }
};
