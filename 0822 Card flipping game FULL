class Solution {
public:
    int flipgame(vector<int>& fronts, vector<int>& backs) {
        unordered_set<int> fnb;
        int n = fronts.size();

        for(int i = 0; i < n; i++) {
            if( fronts[i] == backs[i] ) fnb.insert(fronts[i]);
        }

        int ans = 4000;
        for(int i = 0; i < n; i++) {
            if(fnb.find(fronts[i]) == fnb.end()) ans = min(ans, fronts[i]);
        }
        for(int i = 0; i < n; i++) {
            if(fnb.find(backs[i]) == fnb.end() ) ans = min(ans, backs[i]);
        }

        return ans % 4000;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> fronts = stringToIntegerVector(line);
        getline(cin, line);
        vector<int> backs = stringToIntegerVector(line);
        
        int ret = Solution().flipgame(fronts, backs);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
