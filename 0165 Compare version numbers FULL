class Solution {
public:
    int compareVersion(string version1, string version2) {
        int l1 = version1.length(), l2 = version2.length(), ans = 0;

        int left1 = 0, right1 = 0, left2 = 0, right2 = 0;

        while(right1 < l1 || right2 < l2) {
            right1 = left1, right2 = left2;
            //printf("right1 = %d, right2 = %d\n", right1, right2);

            while(right1 < l1 && version1[right1] != '.') right1++;
            while(right2 < l2 && version2[right2] != '.') right2++;
            //printf("right1 = %d, right2 = %d\n", right1, right2);

            int len1 = right1 - left1, len2 = right2 - left2;
            int num1 = len1 == 0 ? 0 : stoi(version1.substr(left1, len1)), \
            num2 = len2 == 0 ? 0 : stoi( version2.substr(left2, len2) );
            
            //printf("num1 = %d, num2 = %d\n", num1, num2);
            if(num1 < num2) return -1;
            else if(num1 > num2) return 1;

            left1 = right1 + 1;
            left2 = right2 + 1;
        }

        return 0;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string version1 = stringToString(line);
        getline(cin, line);
        string version2 = stringToString(line);
        
        int ret = Solution().compareVersion(version1, version2);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
