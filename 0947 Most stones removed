class Solution {
public:
     bool visited[1000] = {false};

    // int parent[1000];

    // void initParent(int n) {
    //     for(int i = 0; i < n; i++) {
    //         parent[i] = -1;
    //     }
    // }

    // int findRoot(int index) {
    //     if(parent[index] < 0) return index;
    //     else return parent[index] = findRoot[parent[index]];
    // }
    void dfs(vector<vector<int>>& stones, int start) {
        visited[start] = true;

        for(int i = 0; i < stones.size(); i++) {
            if(!visited[i]) {
                if(stones[i][0] == stones[start][0] || stones[i][1] == stones[start][1]) dfs(stones, i);
            }
        }
    }

    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size(), count = 0;

        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                //printf("i = %d\n", i);
                count++;
                dfs(stones, i);
            }
        }
        //printf("count = %d\n", count);

        return n - count;
    }
};
