constexpr int L = 30;
class Trie {
private:
    Trie* children[2] = {nullptr};

public:
    Trie() {};

    void insert(int num) {
        Trie* node = this;
        for(int i = L - 1; i >= 0; i--) {
            int bit = (num >> i) & 1;
            if(node->children[bit] == nullptr) node->children[bit] = new Trie();
            node = node->children[bit];
        }
    }

    int getMaxXor(int x) {

        int ans = 0;
        Trie* node = this;

        for(int i = L - 1; i >= 0; i--) {
            int bit = (x >> i) & 1;
            if(node->children[bit ^ 1] != nullptr) {
                ans |= (1 << i);
                bit ^= 1;
            }
            node = node->children[bit];
        }
        return ans;
    }
};

class Solution {
public:
    vector<int> solveoffline(vector<int>& nums, vector<vector<int>>& queries) {
        
        sort(nums.begin(), nums.end());

        int nn = nums.size(), qn = queries.size();
        
        for(int i = 0; i < qn; i++) queries[i].emplace_back(i);
        sort(queries.begin(), queries.end(), [](vector<int>& a, vector<int>& b) {
            return a[1] < b[1];
        });

        Trie* tree = new Trie();
        vector<int> ans(qn);

        int idx = 0;
        for(int i = 0; i < qn; i++) {
            int qid = queries[i][2], mi = queries[i][1], x = queries[i][0];
            while(idx < nn && nums[idx] <= mi) {
                tree->insert(nums[idx]);
                idx++;
            }

            if(idx == 0) ans[qid] = -1;
            else ans[qid] = tree->getMaxXor(x);
        }

        return ans;
    }
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {

        return solveoffline(nums, queries);
    }
};
