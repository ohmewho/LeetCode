class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();

        unordered_map<int, int> numnext;

        stack<int> stk;
        
        for(int i = 0; i < nums2.size(); i++) {
            if(i == 0) stk.push(nums2[i]);
            else {
                // printf("%d, nums2[%d] = %d, top = %d\n", i, i, nums2[i], stk.top());
                if(nums2[i] < stk.top()) {
                    stk.push(nums2[i]);
                    // printf("if top = %d\n", stk.top());
                }

                else {
                    // printf("else i = %d, top = %d\n", i, stk.top());
                    while(!stk.empty() && stk.top() < nums2[i]) {
                        // printf("now top = %d, nums2[%d] = %d\n", stk.top(), i, nums2[i]);
                        numnext[stk.top()] = nums2[i];
                        stk.pop();
                    }
                    stk.push(nums2[i]);
                }
            }
        }
        // printf("%d\n", stk.top());
        while(!stk.empty()) {
            numnext[stk.top()] = -1;
            stk.pop();
        }

        vector<int> ans(n);

        for(int i = 0; i < n; i++) ans[i] = numnext[nums1[i]];
        
        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

string integerVectorToString(vector<int> list, int length = -1) {
    if (length == -1) {
        length = list.size();
    }

    if (length == 0) {
        return "[]";
    }

    string result;
    for(int index = 0; index < length; index++) {
        int number = list[index];
        result += to_string(number) + ", ";
    }
    return "[" + result.substr(0, result.length() - 2) + "]";
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums1 = stringToIntegerVector(line);
        getline(cin, line);
        vector<int> nums2 = stringToIntegerVector(line);
        
        vector<int> ret = Solution().nextGreaterElement(nums1, nums2);

        string out = integerVectorToString(ret);
        cout << out << endl;
    }
    return 0;
}
