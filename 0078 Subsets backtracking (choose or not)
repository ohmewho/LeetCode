class Solution {
public:

    void backtracking(vector<int>& nums, int idx, vector<vector<int>>& ans, vector<int>& curr) {
        if(idx == nums.size()) {
            ans.emplace_back(curr);
            return;
        }
  
        backtracking(nums, idx + 1, ans, curr);
        curr.emplace_back(nums[idx]); 
        backtracking(nums, idx + 1, ans, curr);
        curr.pop_back();               

    }
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        /***
        
        vector<vector<int>> ans;
        vector<int> curr;
        for(int val = 0; val < (1 << n); val++) {
            curr.clear();
            for(int i = 0; i < n; i++) {
                if(val & ( 1 << i)) curr.emplace_back(nums[i]);
            }
            ans.emplace_back(curr);
        }
        return ans;
        ***/

        vector<vector<int>> ans;
        vector<int> curr;

        backtracking(nums, 0, ans, curr);
        return ans;
    }
};
