class Solution {
public:
    int minSteps(string s, string t) {

        /***
        unordered_map<char, int> charfreqs, charfreqt;
        for(char ch: s) charfreqs[ch]++;
        for(char ch: t) charfreqt[ch]++;

        int ans = 0;
        for(auto [ch, f] : charfreqs) {
            if(charfreqt[ch] < f) ans += f - charfreqt[ch];
        }
        ***/

        int charfreqs[128] = {0}, charfreqt[128] = {0};
        for(char ch: s) charfreqs[ch]++;
        for(char ch: t) charfreqt[ch]++;

        int ans = 0;
        for(int i = 0; i < 128; i++) {
            if(charfreqs[i] > charfreqt[i]) ans += charfreqs[i] - charfreqt[i];
        }

        return ans;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        getline(cin, line);
        string t = stringToString(line);
        
        int ret = Solution().minSteps(s, t);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
