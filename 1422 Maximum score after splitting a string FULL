class Solution {
public:
    void printVec(vector<int> vec) {
        int i = 0;
        for(int n : vec) {
            if(i) printf(" ");
            printf("%d", n);
            i++;
        }
        printf("\n");
    }
    int maxScore(string s) {
        int n = s.length();
        vector<int> zeropresum(n);
        vector<int> onetailsum(n);

        for(int i = 1; i < n; i++) {
            if(s[i - 1] == '0' ) zeropresum[i] = zeropresum[i - 1] + 1;
            else zeropresum[i] = zeropresum[i - 1];

        }

        for(int i = n - 2; i >= 0; i--) {
            if(s[i + 1] == '1') {
                onetailsum[i] = onetailsum[ i + 1] + 1;
            }
            else onetailsum[i] = onetailsum[i + 1];
        }
        int m = 0;
        for(int i = 1; i < n; i++) {
            m = max(m, zeropresum[i] + onetailsum[i - 1]);
        }

        return m;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        
        int ret = Solution().maxScore(s);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
