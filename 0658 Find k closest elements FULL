class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {

        /***
        vector<int> ans;
        int n = arr.size(), remove = n - k, left = 0, right = n - 1;
        while( remove > 0 ) {
            if( abs( arr[left] - x ) > abs( arr[right] - x ) ) left++;
            else right--;
            remove--;
        } 

        for(int i = left; i < right + 1; i++) ans.emplace_back(arr[i]);
        return ans;
        ***/

        int left = 0, n = arr.size(), mid;

        // int right = n - k - 1; 
        // while( left <= right ) {
        //     mid = left + (right - left) / 2;
        //     if( x - arr[mid] > arr[mid + k] - x ) left = mid + 1;
        //     else right = mid - 1;
        // }
        int right = n - k;
        while ( left < right ) {
            mid = left + (right - left) / 2;
            if( x - arr[mid] > arr[mid + k] - x ) left = mid + 1;
            else right = mid;
        }

        return vector<int> {arr.begin() + left, arr.begin() + left + k};

    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int stringToInteger(string input) {
    return stoi(input);
}

string integerVectorToString(vector<int> list, int length = -1) {
    if (length == -1) {
        length = list.size();
    }

    if (length == 0) {
        return "[]";
    }

    string result;
    for(int index = 0; index < length; index++) {
        int number = list[index];
        result += to_string(number) + ", ";
    }
    return "[" + result.substr(0, result.length() - 2) + "]";
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> arr = stringToIntegerVector(line);
        getline(cin, line);
        int k = stringToInteger(line);
        getline(cin, line);
        int x = stringToInteger(line);
        
        vector<int> ret = Solution().findClosestElements(arr, k, x);

        string out = integerVectorToString(ret);
        cout << out << endl;
    }
    return 0;
}
