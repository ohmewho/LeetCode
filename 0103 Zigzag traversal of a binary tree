/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
 #define N 2000
int** zigzagLevelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){
    struct TreeNode* Queue[N];
    *returnSize = 0;
    if(!root) return NULL;

    int** ans = (int**)malloc(sizeof(int*) * N);
    *returnColumnSizes = (int *)malloc(sizeof(int) * N);

    int front = 0, rear = 0, alias, right = 1;
    Queue[rear++] = root;

    struct TreeNode* cur;
    while(front != rear) {

        int size = rear - front;
        //cur = Queue[front];
        int *lvlArray = (int *)malloc(sizeof(int) * size), alias, idx;
        
        if(right) {
            alias = rear, idx = 0;

            while(front != alias) {
                struct TreeNode* cur = Queue[front++];
                lvlArray[idx++] = cur->val;
                printf("lvlArray %d is %d\n", idx - 1, lvlArray[idx - 1]);
                if(cur->left) Queue[rear++] = cur->left;
                if(cur->right) Queue[rear++] = cur->right;
            }
            ans[*returnSize] = lvlArray;
            (*returnColumnSizes)[*returnSize] = size;
            (*returnSize)++;
            right = !right;
        }
        else {
            alias = rear, idx = size;

            while(front != alias) {
                struct TreeNode* cur = Queue[front++];
                lvlArray[--idx] = cur->val;
                //printf("lvlArray %d is %d\n", idx - 1, lvlArray[idx - 1]);
                if(cur->left) Queue[rear++] = cur->left;
                if(cur->right) Queue[rear++] = cur->right;
            }
            ans[*returnSize] = lvlArray;
            (*returnColumnSizes)[*returnSize] = size;
            (*returnSize)++;
            right = !right;
        }

    }

    return ans;
}
