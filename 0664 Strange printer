class Solution {
public:
    int solvedp(string s) {
        int n = s.length();
        if(n <= 1) return n;

        int dp[n][n];
        memset(dp, 0, sizeof(dp));

        for(int i = n - 1; i >= 0; i--) {
            dp[i][i] = 1;
            for(int j = i + 1; j < n; j++) {
                if(s[i] == s[j]) dp[i][j] = dp[i][j - 1];
                else {
                    int curr = INT_MAX;
                    for(int k = i; k < j; k++) {
                        curr = min(curr, dp[i][k] + dp[k + 1][j]);
                    }
                    dp[i][j] = curr;
                }
            }
        }
        return dp[0][n - 1];
    }

    int solvememodp(string s) {
        if (s.size() == 0) return 0;
        //去除连续相同·字符
        int index = 0;
        string str;
        while(index < s.size()) {
            char ch = s[index++];
            str += ch;
            while(index < s.size() && s[index] == ch) {
                index++;
            }
        }
        int n = str.size();
        //dp[i][j]表示从第i个字符到第j个字符（包括两端）需要的打印次数
        vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
        return helper(1,n,dp,str);
    }
    
    int helper(int l, int r, vector<vector<int>>& dp, string& str) {
        if (dp[l][r] != -1) return dp[l][r];
        if (l > r) return dp[l][r] = 0;
        int res = helper(l, r - 1, dp, str) + 1;
        for (int m = l; m < r; ++m) {
            if (str[m-1] == str[r-1]) {
                res = min(res, helper(l, m - 1, dp, str) + helper(m, r - 1, dp, str));
            }
        }
        return dp[l][r] = res;
    }

    int strangePrinter(string s) {
        //return solvedp(s);
        return solvememodp(s);
    }
};
