class Solution {
public:
    int str2time(string ktime) {
        int h = (ktime[0] - '0') * 10 + ktime[1] - '0';
        int m = (ktime[3] - '0') * 10 + ktime[4] - '0';

        return h * 60 + m;
    }

    vector<string> solve(vector<string>& keyName, vector<string>& keyTime) {
        vector<string> ans;
        unordered_map<string, vector<int>> name2time;

        int n = keyName.size();
        for(int i = 0; i < n; i++) {
            name2time[keyName[i]].emplace_back(str2time(keyTime[i]));
        }

        for(auto& [name, timevec]: name2time) {
            sort(timevec.begin(), timevec.end());
            int size = timevec.size();

            for(int i = 2; i < size; i++) {
                if(timevec[i - 2] + 60 >= timevec[i]) {
                    //printf(" name %s, i - 2 %d, i %d\n", name.c_str(), timevec[i - 2], timevec[i]);
                    ans.emplace_back(name);
                    break;
                }
            }
        }

        sort(ans.begin(), ans.end());
        return ans;

    }   

    vector<string> alertNames(vector<string>& keyName, vector<string>& keyTime) {
        return solve(keyName, keyTime);
    }
};
