class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.length(), n = word2.length();

        //vector<vector<int>> dp(m + 1, vector<int> (n + 1, 0));
        int dp[m + 1][n + 1];

        // for(int row = 1; row < m + 1; row++) {
        //     for(int col = 1; col < n + 1; col++) {
        //         if(word1[row - 1] == word2[col - 1]) dp[row][col] = dp[row - 1][col - 1] + 1;
        //         else dp[row][col] = max(dp[row - 1][col], dp[row][col - 1]);
        //     }
        // }
        for(int row = 0; row < m + 1; row++) {
            for(int col = 0; col < n + 1; col++) {
                if(row == 0 || col == 0) {
                    dp[row][col] = 0;
                    continue;
                }

                if( word1[row - 1] == word2[col - 1] ) dp[row][col] = dp[row - 1][col - 1] + 1;
                else dp[row][col] = max(dp[row - 1][col], dp[row][col - 1]); 
            }
        }

        return m + n - 2 * dp[m][n];
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string word1 = stringToString(line);
        getline(cin, line);
        string word2 = stringToString(line);
        
        int ret = Solution().minDistance(word1, word2);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
