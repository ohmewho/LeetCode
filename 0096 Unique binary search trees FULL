class Solution {
public: 

    int katalan(int n) {
        long long c = 1;
        for(int i = 0; i < n; i++) c = c * 2 * (2 * i + 1) / (i + 2);
        return c;        
    }

    int dynamic(int n) {
        vector<int> dp(n + 1, 0);
        dp[0] = 1;
        dp[1] = 1;

        for(int i = 2; i < n + 1; i++) {
            for(int j = 0; j < i; j++) {
                dp[i] += dp[j] * dp[i - 1 - j];
            }
        }

        return dp[n];
    }

    int numTrees(int n) {

        //return katalan(n);
        return dynamic(n);
    }
};

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        int n = stringToInteger(line);
        
        int ret = Solution().numTrees(n);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
