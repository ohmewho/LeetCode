class Solution {
public:
    // void printVec(vector<int> vec) {
    //     int i = 0;
    //     for(int n : vec) {
    //         if(i) printf(" ");
    //         printf("%d", n);
    //         i++;
    //     }
    //     printf("\n");
    // }
    int equalSubstring(string s, string t, int maxCost) {
        int f = 0, r = 0, n = s.length(), maxLen = 0, currLen = 0, currCost = 0;
        // vector<int> diff(n);
        // for(int i = 0; i < n; i++) diff[i] = abs(s[i] - t[i]);

        //printVec(diff);
        while( r < n) {
            currCost += abs(s[r] - t[r]);
            while(currCost > maxCost) {
                currCost -= abs(s[f] - t[f]);
                f++;
            }

            maxLen = max(maxLen, r - f + 1);

            r++;

        }    

        return maxLen;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        getline(cin, line);
        string t = stringToString(line);
        getline(cin, line);
        int maxCost = stringToInteger(line);
        
        int ret = Solution().equalSubstring(s, t, maxCost);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
