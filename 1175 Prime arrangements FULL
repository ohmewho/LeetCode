class Solution {
private:
    static constexpr int modula = 1e9 + 7;
    int isnotPrime[101], primes[30], idx = 0;
    long long factorial[101];
public:
    
    void init(int n) {
        
        for(int i = 2; i <= n; i++) {
            if( !isnotPrime[i] ) primes[idx++] = i;
            for(int j = 0; j < idx && i * primes[j] <= n; j++) {
                isnotPrime[ i * primes[j]] = 1;
                if( i % primes[j] == 0 ) break;
            }
        }

        // for(int i = 0; i < idx; i++) {
        //     if(i)printf(" ");
        //     printf("%d", primes[i]);
        // }
        // printf("\n");
    }

    void getFactorials(int n) {
        factorial[0] = 1;
        for(int i = 1; i < n + 1; i++) factorial[i] = (long long) i * factorial[i - 1] % modula;
    }

    int numPrimeArrangements(int n) {

        init(n);
        getFactorials(n);

        return factorial[idx] * factorial[n - idx] % modula;
    }
};

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        int n = stringToInteger(line);
        
        int ret = Solution().numPrimeArrangements(n);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
