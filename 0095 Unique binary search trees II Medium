/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int start, int end) {
        if(start > end) return {nullptr};

        vector<TreeNode*> ans;

        for(int i = start; i <= end; i++) {
            vector<TreeNode*> leftvec = generateTrees(start, i - 1);
            vector<TreeNode*> rightvec = generateTrees(i + 1, end);

            for(auto left: leftvec) {
                for(auto right: rightvec) {
                    TreeNode* tn = new TreeNode(i);
                    tn->left = left;
                    tn->right = right;

                    ans.emplace_back(tn);
                }
            }
        }
        return ans;
    }
    vector<TreeNode*> generateTrees(int n) {
        if(!n) return {};

        return generateTrees(1, n);
    }
};
