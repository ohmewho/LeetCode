/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    vector<TreeNode*> tnvec;

    void inorder(TreeNode* root) {
        if(root) {
            inorder(root->left);
            tnvec.emplace_back(root);
            inorder(root->right);
        }
    }

    void vct(TreeNode* root) {
        inorder(root);
        TreeNode* x = nullptr, * y = nullptr;
        for(int i = 1; i < tnvec.size(); i++) {
            if(tnvec[i]->val < tnvec[i - 1]->val) {
                y = tnvec[i];
                if(!x) x = tnvec[i - 1];
                else break;
            }
        }
        //printf("x = %d, y = %d\n", x->val, y->val);
        // int temp = y->val;
        // y->val = x->val;
        // x->val = temp;
        swap(x->val, y->val);
    }


    TreeNode* x = nullptr, * y = nullptr, * prev = nullptr;

    void recursive(TreeNode* root) {

        if(root) {
            recursive(root->left);
            if(prev && prev->val > root->val) {
                if(!x) x = prev;
                y = root;
            }
            prev = root;
            recursive(root->right);
        }
    }

    void iterate(TreeNode* root) {

        stack<TreeNode*> stk;

        TreeNode* curr = root;
        while(curr || !stk.empty()) {
            while(curr) {
                stk.emplace(curr);
                curr = curr->left;
            }

            curr = stk.top();
            stk.pop();
            
            if(prev && prev->val > curr->val) {
                x = x == nullptr? prev : x;
                y = curr;
            }
            prev = curr;

            curr = curr->right;
        }
    }

    void recoverTree(TreeNode* root) {
        //vct(root);

        // recursive(root);
        // swap(x->val, y->val);

        iterate(root);
        swap(x->val, y->val);
    }
};
