class Solution {
public:
    int math(vector<int>& nums, int k) {
        vector<int> oddids({-1});
        int n = nums.size();

        for(int i = 0; i < n; i++) {
            if(nums[i] % 2 == 1) oddids.emplace_back(i);
        }
        oddids.emplace_back(n);
        //printf("size = %d\n", oddids.size());

        int ans = 0, size = oddids.size();
        for(int i = 1; i < size - k; i++) {
            ans += (oddids[i] - oddids[i - 1]) * (oddids[i + k] - oddids[i + k - 1]);
            //if(i + k == oddids.size() - 1) printf("heell\n");
        }
        //printf("ans = %d\n", ans);
        return ans;
    }

    int presumandSW(vector<int>& nums, int k) {
        unordered_map<int, int> presumfreq{{0, 1}};

        int presum = 0, ans = 0;
        for(int i = 0; i < nums.size(); i++) {
            presum += (nums[i] & 1);
            if(presum - k >= 0)ans += presumfreq[presum - k];

            presumfreq[presum]++;
        }
        //for(auto [presum, freq]: presumfreq) printf("presum = %d, freq = %d\n", presum, freq);
        return ans;
    }

    int presumandSW1(vector<int>& nums, int k) {
        int n = nums.size();

        vector<int> presumfreq(n + 1, 0);
        presumfreq[0] = 1;

        int presum = 0, ans = 0;
        for(int i = 0; i < n; i++) {
            presum += (nums[i] & 1);
            if(presum - k >= 0)ans += presumfreq[presum - k];

            presumfreq[presum]++;
        }
        //for(auto [presum, freq]: presumfreq) printf("presum = %d, freq = %d\n", presum, freq);
        return ans;
    }

    int numberOfSubarrays(vector<int>& nums, int k) {

        //return math(nums, k);
        //return presumandSW(nums, k);
        return presumandSW1(nums, k);
    }
};
