class Solution {
public:
    int numDistinct(string s, string t) {
        int lens = s.length(), lent = t.length();
        long long dp[lens + 1][lent + 1];
        for(int row = 0; row < lens + 1; row++) dp[row][0] = 1;
        for(int col = 1; col < lent + 1; col++) dp[0][col] = 0;

        for(int row = 1; row < lens + 1; row++) {
            for(int col = 1; col < lent + 1; col++) {

                // if(s[row - 1] == t[col - 1]) dp[row][col] = \
                // dp[row - 1][col - 1] + dp[row - 1][col];
                // else dp[row][col] = dp[row - 1][col];
                
                dp[row][col] = dp[row - 1][col];
                if(s[row - 1] == t[col - 1]) dp[row][col] += dp[row - 1][col - 1];
                
            }
        }

        return dp[lens][lent];

    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        getline(cin, line);
        string t = stringToString(line);
        
        int ret = Solution().numDistinct(s, t);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
