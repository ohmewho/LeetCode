/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    /***
    bool find(TreeNode* root, unordered_set<int>& ust, int k) {
        if( !root ) return false;
        if( ust.count(k - root->val) ) return true;
        ust.insert(root->val);
        
        return find( root->left, ust, k ) || find( root->right, ust, k );
    }
    bool findTarget(TreeNode* root, int k) {
        unordered_set<int> ust;

        return find(root, ust, k);
    }    
    ***/



    bool findTarget(TreeNode* root, int k) {
        vector<int> inorderseq;
        function<void(TreeNode*)> getInorderSeq = [&](TreeNode* root) {
            if(root) {
                getInorderSeq(root->left);
                inorderseq.emplace_back(root->val);
                getInorderSeq(root->right);
            }
        };
        getInorderSeq(root);

        int lhs = 0, rhs = inorderseq.size() - 1, sum;

        while( lhs < rhs ) {
            sum = inorderseq[lhs] + inorderseq[rhs];
            if( sum == k )return true;
            else if( sum < k ) lhs++;
            if( sum > k ) rhs--;
        }
        return false;   
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

TreeNode* stringToTreeNode(string input) {
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    if (!input.size()) {
        return nullptr;
    }

    string item;
    stringstream ss;
    ss.str(input);

    getline(ss, item, ',');
    TreeNode* root = new TreeNode(stoi(item));
    queue<TreeNode*> nodeQueue;
    nodeQueue.push(root);

    while (true) {
        TreeNode* node = nodeQueue.front();
        nodeQueue.pop();

        if (!getline(ss, item, ',')) {
            break;
        }

        trimLeftTrailingSpaces(item);
        if (item != "null") {
            int leftNumber = stoi(item);
            node->left = new TreeNode(leftNumber);
            nodeQueue.push(node->left);
        }

        if (!getline(ss, item, ',')) {
            break;
        }

        trimLeftTrailingSpaces(item);
        if (item != "null") {
            int rightNumber = stoi(item);
            node->right = new TreeNode(rightNumber);
            nodeQueue.push(node->right);
        }
    }
    return root;
}

int stringToInteger(string input) {
    return stoi(input);
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        TreeNode* root = stringToTreeNode(line);
        getline(cin, line);
        int k = stringToInteger(line);
        
        bool ret = Solution().findTarget(root, k);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
