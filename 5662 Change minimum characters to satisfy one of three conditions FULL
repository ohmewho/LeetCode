class Solution {
public:
    int minCharacters(string a, string b) {
        int len_a = a.length(), len_b = b.length(), ans = INT_MAX>>2;
        int total_a, total_b;
        
        vector<int> count_a(26, 0), count_b(26, 0);
        for(auto& ch: a) count_a[ch - 'a']++;
        for(auto& ch: b) count_b[ch - 'a']++;
        
        for(int i = 0; i < 26; i++) {
            
            total_a = 0, total_b = 0;
            if(i > 0) {
                for(int j = i; j < 26; j++) { 
                    total_a += count_a[j];
                    total_b += count_b[j];
                }
                for(int j = 0; j < i; j++) {
                    total_a += count_b[j];
                    total_b += count_a[j];
                }
                //printf(" i = %d, tota = %d, totb = %d\n", i, total_a, total_b);
                ans = min(ans, total_a);
                ans = min(ans, total_b);
            }
            ans = min(ans, len_a + len_b - count_a[i] - count_b[i]);
            
        }
        
        return ans;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string a = stringToString(line);
        getline(cin, line);
        string b = stringToString(line);
        
        int ret = Solution().minCharacters(a, b);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
