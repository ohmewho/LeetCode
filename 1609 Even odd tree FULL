#include <iostream>
#include <vector>
#include <queue> 
#include <algorithm>
#include <sstream>


using namespace std;


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() : val(0), left(nullptr), right(nullptr) {}
	TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
	TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};


class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        bool ans = true;
        
        TreeNode* queue[100001];
        int front = 0, rear = 0, rear_alias, lvl = 0;
        queue[rear++] = root;
        
        
        while(front != rear) {
        	
        	rear_alias = rear;
        	
        	bool oddeven, incrdecr;
        	if(lvl % 2 == 0) {
        		
        		int pre = 0;
        		while(front != rear_alias) {
        			TreeNode* t = queue[front++];
        			if(t->val % 2 == 0 || t->val <= pre) {
        				//printf("t->val = %d\n", t->val);
        				ans = false;
        				break;
					}
					
					pre = t->val;
        			
        			if(t->left) queue[rear++] = t->left;
        			if(t->right) queue[rear++] = t->right;
        			
				}	
			}
			
			else {
				int pre = 1000001;
	        	while(front != rear_alias) {
	        		TreeNode* t = queue[front++];
	        		if(t->val % 2 != 0 || t->val >= pre) {
	        			//printf("t->val = %d\n", t->val);
	        			ans = false;
	        			break;
					}
					pre = t->val;
					
					if(t->left) queue[rear++] = t->left;
					if(t->right) queue[rear++] = t->right;
				}				
			}
			
			if(!ans) break;
			lvl++;
		}
        
        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

TreeNode* stringToTreeNode(string input) {
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    if (!input.size()) {
        return nullptr;
    }

    string item;
    stringstream ss;
    ss.str(input);

    getline(ss, item, ',');
    TreeNode* root = new TreeNode(stoi(item));
    queue<TreeNode*> nodeQueue;
    nodeQueue.push(root);

    while (true) {
        TreeNode* node = nodeQueue.front();
        nodeQueue.pop();

        if (!getline(ss, item, ',')) {
            break;
        }

        trimLeftTrailingSpaces(item);
        if (item != "null") {
            int leftNumber = stoi(item);
            node->left = new TreeNode(leftNumber);
            nodeQueue.push(node->left);
        }

        if (!getline(ss, item, ',')) {
            break;
        }

        trimLeftTrailingSpaces(item);
        if (item != "null") {
            int rightNumber = stoi(item);
            node->right = new TreeNode(rightNumber);
            nodeQueue.push(node->right);
        }
    }
    return root;
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        TreeNode* root = stringToTreeNode(line);
        
        bool ret = Solution().isEvenOddTree(root);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
