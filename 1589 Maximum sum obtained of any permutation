class Solution {
    static constexpr int modula = 1e9 + 7;
public:

    int solve(vector<int>& nums, vector<vector<int>>& requests) {
        int n = nums.size();
        vector<int> freqs(n, 0);

        for(vector<int> & r: requests) {
            freqs[r[0]]++;
            if(r[1] + 1 < n) freqs[r[1] + 1]--;
        }

        for(int i = 1; i < n; i++) freqs[i] += freqs[i - 1];
        
        sort(freqs.begin(), freqs.end());
        sort(nums.begin(), nums.end());

        long long sum = 0;
        for(int i = n - 1; i >= 0 && freqs[i] > 0; i--) {
            sum += (long long) freqs[i] * nums[i];
        }

        return sum % modula;
    }

    int maxSumRangeQuery(vector<int>& nums, vector<vector<int>>& requests) {
        return solve(nums, requests);
    }
};
