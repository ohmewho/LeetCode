class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {
        int n = cardPoints.size(), sum = accumulate(cardPoints.begin(), cardPoints.end(), 0);

        int curr = accumulate(cardPoints.begin(), cardPoints.begin() + n - k, 0), minsum = curr;

        //printf("curr = %d, k - 1 = %d\n", curr, n - k);
        for(int i = 1; i < k + 1; i++) {
            //printf("i = %d, end = %d\n", i, i + n - k - 1);
            curr = curr - cardPoints[i - 1] + cardPoints[i + n - k - 1];
            minsum = min(minsum, curr);
        }

        return sum - minsum;

    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> cardPoints = stringToIntegerVector(line);
        getline(cin, line);
        int k = stringToInteger(line);
        
        int ret = Solution().maxScore(cardPoints, k);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
