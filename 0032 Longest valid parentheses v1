void printArr(int *arr, int n) {
    for(int i = 0; i < n; i++) {
        if(i) printf(" ");
        printf("%d", arr[i]);
    }
    printf("\n");
}

//typedef enum{false, true} bool;

int longestValidParentheses(char * s){
    
    int max = 0, n = strlen(s);
    if(!n) return 0;
    int dp[n];
    //printf("%d\n", sizeof(dp));
    //memset(dp, 0, sizeof(dp));
    for(int i = 0; i < n; i++) {
        dp[i] = 0;
    }

    //printArr(dp, n);
    dp[0] = 0;
    for(int i = 1; i < n; i++) {
        if(s[i] == ')' && s[i - 1] == '(') {
            if(i < 2) dp[i] = 2;
            else dp[i] = 2 + dp[i - 2];// i >= 2;
        }
        else if(s[i] == ')') {// s[i - 1] == ')';
            if(i - dp[i - 1] - 1 >= 0 && s[i - dp[i - 1] - 1] == '(') {
                if(i - dp[i - 1] - 1 < 1) dp[i] = 2 + dp[i - 1]; // i - dp[i - 1] - 1 == 0
                else dp[i] = 2 + dp[i - 1] + dp[i - dp[i - 1] - 2]; // i - dp[i - 1] - 1 >= 1;
            }

        }
        if(dp[i] > max) max = dp[i];
    }
    //printArr(dp, n);

    return max;
}
