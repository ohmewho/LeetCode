class TrieNode {
private: 
    bool isWord = false;
    TrieNode* children[26] = {nullptr};

public:
    TrieNode(){};

    void insert(string word) {
        TrieNode* tn = this;
        for(char w: word) {
            if(tn->children[w - 'a'] == nullptr) tn->children[w - 'a'] = new TrieNode();
            tn = tn->children[w - 'a'];
        }
        tn->isWord = true;
    }

    bool search(string word) {
        
        TrieNode* tn = this;
        for(char w: word) {
            if(tn->children[w - 'a'] == nullptr || !tn->children[w - 'a']->isWord) return false;
            tn = tn->children[w - 'a'];
        }
        return true;
    }
};


class Solution {
public:
    string solve(vector<string>& words) {
        unordered_set<string> st{words.begin(), words.end()};

        sort(words.begin(), words.end());
        
        string ans = "";
        int n = words.size();
        for(int i = 0; i < n; i++) {
            string word = words[i];
            bool possible = true;
            for(int j = 1; j < word.size(); j++) {
                if(st.count(word.substr(0, j)) == 0) {
                    possible = false;
                    break;
                }
            }
            if(possible && word.length() > ans.length()) ans = word;
        }

        return ans;
    } 

    string solvelc(vector<string>& words) {
        string ans = "";
        set<string> wordset;
        for (string word: words) 
            wordset.insert(word);
        for (string word : words) {
            if (word.size() > ans.size() ||
                    word.size() == ans.size() && word < ans) {
                bool good = true;
                for (int k = 1; k < word.size(); k++) {
                    if (!wordset.count(word.substr(0, k))) {
                        good = false;
                        break;
                    }
                }
                if (good) 
                    ans = word;
            }    
        }
        return ans;
    }

    string solvetrie(vector<string>& words) {
        TrieNode* tn = new TrieNode();

        for(string word: words) tn->insert(word);

        string ans = "";
        for(const string& word: words) {
            if(tn->search(word)){
                if(word.length() > ans.length()) ans = word;
                else if(word.length() == ans.length() && word < ans) ans = word;
            }
        }

        return ans;
    }

    string longestWord(vector<string>& words) {
        //return solve(words);
        //return solvelc(words);
        return solvetrie(words);
    }
};
