class Solution {
public:
    int minimumDeletions(string s) {
        int n = s.length();

        vector<int> dpa(n + 1, 0), dpb(n + 1, 0);
        for(int i = 1; i < n + 1; i++) { // i is the position in between characters
            if( s[i - 1] == 'a') {
                dpa[i] = dpa[i - 1];
                dpb[i] = dpb[i - 1] + 1;
            }
            else {
                dpa[i] = dpa[i - 1] + 1;
                dpb[i] = min(dpb[i - 1], dpa[i - 1]);
            }
        }

        //ans = 

        return min(dpa[n], dpb[n]);
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        
        int ret = Solution().minimumDeletions(s);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
