class Solution {
public:
    int minOperations(vector<int>& nums1, vector<int>& nums2) {
        int sum1 = accumulate(nums1.begin(), nums1.end(), 0);
        int sum2 = accumulate(nums2.begin(), nums2.end(), 0);

        if(sum1 == sum2) return 0;
        if(sum1 > sum2) return minOperations(nums2, nums1);

        vector<int> distfreq(6);
        for(int n: nums1) distfreq[6 - n]++;
        for(int n: nums2) distfreq[n - 1]++;

        int diff = sum2 - sum1, ans = 0;
        for(int i = 5; i >= 1 && diff > 0; i--) {
            while( distfreq[i] > 0 && diff > 0 ) {
                distfreq[i]--;
                diff -= i;
                ans++;
            }
        }
        return diff > 0 ? -1 : ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums1 = stringToIntegerVector(line);
        getline(cin, line);
        vector<int> nums2 = stringToIntegerVector(line);
        
        int ret = Solution().minOperations(nums1, nums2);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
