class Solution {
public:
    int maxLengthBetweenEqualCharacters(string s) {
        unordered_map<char, int> first, last;
        int n = s.length(), ans = -1, cur = -1;
        for(int i = 0; i < n; i++) {
            if(first.find(s[i]) == first.end()) first[s[i]] = i;
            else cur = i - 1 - first[s[i]];

            ans = max(ans, cur);
        }
        // for(int i = n - 1; i > -1; i--) {
        //     if(last.find(s[i]) == last.end()) last[s[i]] = i;
        // }

        // int ans = -1, cur, left, right;
        // for(int i = 0; i < n; i++) {
        //     left = first[s[i]];
        //     right = last[s[i]];

        //     if(left != right ) {
        //         cur = right - left - 1;
        //         ans = max(ans, cur);
        //     }

        // }

        return ans;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string s = stringToString(line);
        
        int ret = Solution().maxLengthBetweenEqualCharacters(s);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
