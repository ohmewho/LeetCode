class Solution {
public:
    bool isPrefix(string word, string searchWord) {
        int n = searchWord.length();

        if(word.length() < n) return false;

        bool ans = true;
        for(int i = 0; i < n; i++) {
            if(word[i] != searchWord[i]) ans = false;
        }
        //printf("finished.\n");
        return ans;
    }

    int isPrefixOfWord(string sentence, string searchWord) {
        int n = sentence.length();
        string word;

        int i = 0, idx = 1;
        while(isspace(sentence[i])) i++;
        //printf("n = %d, here i = %d\n", n, i);

        bool found = false;
        while(i < n) {
            int end = i;
            //printf("i = %d, end = %d\n", i, end);
            while(end < n && !isspace(sentence[end])) {
                end++;
                //printf("end = %d\n", end);
            }
            word = string(sentence, i, end - i);
            if(isPrefix(word, searchWord)) return idx;
            i = end + 1;
            idx++;
            //printf("helel\n");
        }

        return -1;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string sentence = stringToString(line);
        getline(cin, line);
        string searchWord = stringToString(line);
        
        int ret = Solution().isPrefixOfWord(sentence, searchWord);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
