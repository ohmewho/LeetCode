class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        int n = nums.size();

        unordered_map<int, vector<int>> numinfo;

        for(int i = 0; i < n; i++) {
            if(numinfo.find(nums[i]) != numinfo.end()) {
                numinfo[nums[i]][0]++;
                numinfo[nums[i]][2] = i;
            }
            else {
                numinfo[nums[i]] = {1, i, i};
            }
        }

        int maxfreq = 0, ans = n;
        for(auto [num, vec] : numinfo) {
            if(vec[0] > maxfreq) {
                maxfreq = vec[0];
                //printf("maxfreq = %d\n", maxfreq);
                //ans = min(ans, vec[2] - vec[1] + 1);
            }
        }

        for(auto [num, vec] : numinfo) {
            if(vec[0] == maxfreq) {
                ans = min(ans, vec[2] - vec[1] + 1);
            }
        }
        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        int ret = Solution().findShortestSubArray(nums);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
