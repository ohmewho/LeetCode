class Solution {
public:
    int gcd(int x, int y) {
        return (x % y == 0) ? y : gcd(y, x % y);
    }

    int countDifferentSubsequenceGCDs(vector<int>& nums) {
        int maxnum = *max_element(nums.begin(), nums.end());
        maxnum++;
        
        vector<int> g(maxnum);

        for(int n : nums) {
            //printf("n = %d\n", n);
            for(int y = 1; y * y <= n; y++) {
                if(n % y == 0) {
                    if(!g[y]) g[y] = n;
                    else g[y] = gcd(g[y], n);

                    if(y * y != n) {
                        int z = n / y;
                        if(!g[z]) g[z] = n;
                        else g[z] = gcd(g[z], n);
                    }
                }
            }
        }
        // for(int i = 0; i < maxnum; i++) {
        //     printf(" %d ", g[i]);
        // }

        int ans = 0;
        for(int i = 1; i < maxnum; i++) {
            if(g[i] == i) ans++;
        }
        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        int ret = Solution().countDifferentSubsequenceGCDs(nums);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
