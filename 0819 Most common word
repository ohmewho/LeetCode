class Solution {
public:
    string mostCommonWord(string paragraph, vector<string>& banned) {
        
        unordered_map<string, int> strfreq;
        
        int n = paragraph.length();
        for(int i = 0; i < n; i++) {
            if(!isalnum(paragraph[i])) paragraph[i] = ' ';
            else paragraph[i] = tolower(paragraph[i]);
        }

        stringstream ss(paragraph);
        string word;
        while(ss >> word) {
            // for(int i = 0; i < word.length(); i++) {
            //     if( word[i] >= 'A' && word[i] <= 'Z' ) word[i] = tolower(word[i]);
            //     else if( !( word[i] >= 'a' && word[i] <= 'z' )) word[i] = ' ';
            // }
            // word.erase( find_if(word.rbegin(), word.rend(), [](char ch){return !isspace(ch);}).base(), word.end());
            // printf("%s\n", word.c_str() );
            strfreq[word]++;
        }

        int maxfreq = 0;
        string ans;
        for(auto [str, freq] : strfreq) {
            //printf("str = %s, freq = %d\n", str.c_str(), freq);
            if( find(banned.begin(), banned.end(), str) == banned.end() ) {
                if(freq > maxfreq) {

                    ans = str;
                    maxfreq = freq;  
                    //printf("ans = %s\n", ans.c_str());                  
                }
            }
        }

        return ans;
    }
};
