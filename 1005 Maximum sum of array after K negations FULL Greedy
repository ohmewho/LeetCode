class Solution {
public:
    int largestSumAfterKNegations(vector<int>& A, int K) {
        int n = A.size();
        
        sort(A.begin(), A.end(), [](const int& l, const int& r) {
            return abs(l) > abs(r);
        });

        // for( int i = 0; i < n; i++ ) {
        //     if( i ) printf(" ");
        //     printf("%d", A[i]);
        // }
        // printf("\n");

        for(int i = 0; i < n; i++) {
            if( K && A[i] < 0 ) {
                A[i] *= -1;
                K--;
            }
        }

        if( K % 2 == 1 ) A[n - 1] *= -1;
        
        int ans = 0;
        for(int a: A) ans += a;
        
        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> A = stringToIntegerVector(line);
        getline(cin, line);
        int K = stringToInteger(line);
        
        int ret = Solution().largestSumAfterKNegations(A, K);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
