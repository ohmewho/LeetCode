class Solution {
public:
    typedef long long ll;
    int magicTower(vector<int>& nums) {
        ll sum = 1;
        for(int n: nums) sum += n;
        if(sum < -1) return -1;

        sum = 1;
        int ans = 0;
        priority_queue<int> maxHeap;
        // for(int i = 0; i < nums.size(); i++) {
        //     sum += (ll)nums[i];
        //     if(nums[i] < 0) {
        //         maxHeap.emplace(-nums[i]);
        //     }
        //     while(maxHeap.size() && sum <= 0) {
        //         sum += (ll)maxHeap.top();
        //         maxHeap.pop();
        //         ans++;
        //     }
        // }

        priority_queue<int> maxHeap;
        for(int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if(nums[i] < 0) {
                maxHeap.emplace(-nums[i]);
                if(sum <= 0) {
                    sum += maxHeap.top();
                    maxHeap.pop();
                    ans++;
                }
            }
        }

        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        int ret = Solution().magicTower(nums);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
