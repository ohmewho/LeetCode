class Solution {
public:
    int minDistance(string word1, string word2) {
        int l1 = word1.length(), l2 = word2.length();

        if(l1 * l2 == 0) return l1 + l2;

        vector<vector<int>> dp(l1 + 1, vector<int>(l2 + 1, 0));

        for(int i = 0; i < l1 + 1; i++) dp[i][0] = i;
        for(int i = 1; i < l2 + 1; i++) dp[0][i] = i;

        for(int row = 1; row < l1 + 1; row++) {
            for(int col = 1; col < l2 + 1; col++) {
                //printf("")
                if(word1[row - 1] != word2[col - 1]) dp[row][col] = 1 + min(dp[row - 1][col - 1], min(dp[row - 1][col], dp[row][col - 1]));
                else dp[row][col] = dp[row - 1][col - 1];
            }
        }

        // for(int i = 0; i < l1 + 1; i++) {
        //     int j = 0;
        //     for(int n : dp[i]) {
        //         if(j) printf(" ");
        //         printf("%d", n);
        //         j++;
        //     }
        //     printf("\n");
        // }

        return dp[l1][l2];
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string word1 = stringToString(line);
        getline(cin, line);
        string word2 = stringToString(line);
        
        int ret = Solution().minDistance(word1, word2);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
