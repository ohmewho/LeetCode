#include <cstdio>
#include <iostream>
#include <cassert>
#include <sstream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

class Solution {
public:
    string reformatDate(string date) {
    	//printf("string date = %s\n", date.c_str());
        
        map<string, string> months = {{"Jan", "01"}, {"Feb", "02"}, \
		{"Mar", "03"}, {"Apr", "04"}, {"May", "05"}, {"Jun", "06"}, {"Jul", "07"}, \
		{"Aug", "08"}, {"Sep", "09"}, {"Oct", "10"}, {"Nov", "11"}, {"Dec", "12"}};

//        int pos1 = date.find_first_of(" "), pos2 = date.find_last_of(" ");
//		
//		
//		string year = date.substr(pos2 + 1, 4), ans = "";
//        //printf("year = %s\n", year.c_str());
//        
//        string m = date.substr(pos1 + 1, 3), month, day = date.substr(0, pos1);
//        //printf("m = %s\n", m.c_str());
//        //printf("here day = %s\n", day.c_str());
//        month = months[m];
//        int daylen = day.length();
//        
//        day = day.substr(0, daylen - 2);
//        //printf("day = %s\n", day.c_str());
//        if(day.length() == 1) day = "0" + day;
//        ans += year + '-' + month + '-' + day;

		stringstream ss(date);
		string day, month, year;
		ss >> day >> month >> year;
		
		day = day.substr(0, day.length() - 2);
		if(day.length() == 1) day = '0' + day;
		
		month = months[month];
		string ans = year + '-' + month + '-' + day;

        return ans;

    }
};

void trimLeftTrailingSpaces(string& input) {
	
	input.erase(input.begin(), find_if(input.begin(), input.end(), [](char ch){
		return !isspace(ch);
	}));
}

void trimRightTrailingSpaces(string& input) {
	
	input.erase(find_if(input.rbegin(), input.rend(), [](char ch) {
		return !isspace(ch);
	}).base(), input.end());
}

string stringToString(string input) {
    assert(input.length() >= 2);
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    //printf("string input date = %s\n", input.c_str());
    
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string date = stringToString(line);
        
        string ret = Solution().reformatDate(date);

        string out = (ret);
        cout << out << endl;
    }
    return 0;
}
