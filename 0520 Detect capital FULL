class Solution {
public:
    bool detectCapitalUse(string word) {
        int n = word.length();
        bool allcap = true, alllower = true, initialcap = true;

        for(int i = 0; i < n; i++) {
            if( !(word[i] >= 'A' && word[i] <= 'Z') ) {
                allcap = false;
                break;
            }
        }

        for(int i = 0; i < n; i++) {
            if( !(word[i] >= 'a' && word[i] <= 'z') ) {
                alllower = false;
                break;
            }
        }

        for(int i = 0; i < n; i++) {
            if( i == 0 ) {
                if( !(word[i] >= 'A' && word[i] <= 'Z') ) {
                    initialcap = false;
                    break;
                }
            }
            else {
                if( !(word[i] >= 'a' && word[i] <= 'z') ) {
                    initialcap = false;
                    break;
                }
            }
        }

        return allcap || alllower || initialcap;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        string word = stringToString(line);
        
        bool ret = Solution().detectCapitalUse(word);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
