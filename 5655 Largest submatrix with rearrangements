class Solution {
public:
    void printArr(int *arr, int n) {
        for(int i = 0; i < n; i++) {
            if(i) printf(" ");
            printf("%d", arr[i]);
        }
        printf("\n");
    }

    void printvec(vector<int> vec) {
        int n = vec.size();
        for(int i = 0; i < n; i++) {
            if(i) printf(" ");
            printf("%d", vec[i]);
        }
        printf("\n");            
    }

    int largestSubmatrix(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();

        vector<vector<int>> heights(m, vector<int>(n, 0));

        for(int row = 0; row < m; row++) {
            for(int col = 0; col < n; col++) {
                if(row == 0) heights[row][col] = matrix[row][col];
                else {
                    if(matrix[row][col]) heights[row][col] = heights[row - 1][col] + 1;
                } 
            }
        }

        // for(int row = 0; row < m; row++) {
        //     printvec(heights[row]);
        // }

        int maxArea = 0;
        for(int row = 0; row < m; row++) {
            vector<int> rowheights = heights[row];
            sort(rowheights.begin(), rowheights.end(), greater<int>());
            for(int col = 0; col < n; col++) {
                maxArea = max(maxArea, rowheights[col] * (col + 1));
            }
            //printvec(rowheights);
        }

        return maxArea;
    }
};
