#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
#include <sstream>

using namespace std;

class Solution {
public:
    int maxOperations(vector<int>& nums, int k) {
		
		unordered_map<int, int> numfreq;
		for(auto num : nums) {
			numfreq[num]++;
		}
		
		int ans = 0;
		
		for(auto nf : numfreq) {
			//printf("%d %d\n", nf.first, nf.second);
			if( nf.first * 2 == k) ans += nf.second / 2;
			else if(nf.first * 2 < k && numfreq.find(k - nf.first) != numfreq.end()) {
				//printf("nf.first = %d\n", nf.first);
				ans += min(nf.second, numfreq[k - nf.first]);
			}
		}
		
//		for(int i = 0; i < pseudo.size(); i ++) {
//			if(i) printf(" ");
//			printf("%d", pseudo[i]);
//		}
//		printf("\n");
		
		return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        getline(cin, line);
        int k = stringToInteger(line);
        
        int ret = Solution().maxOperations(nums, k);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
