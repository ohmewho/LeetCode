/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;
        Node* Queue[4096], *first, *second;
        int front = 0, rear = 0, rear_alias;

        Queue[rear++] = root;

        while(front != rear) {

            rear_alias = rear;
            while(front != rear_alias) {
                first = Queue[front++];
                if(front != rear_alias) second = Queue[front];
                else second = nullptr;
                first->next = second;
                if(first->left) Queue[rear++] = first->left;
                if(first->right) Queue[rear++] = first->right;
            }

        }
        return root;
    }
};
