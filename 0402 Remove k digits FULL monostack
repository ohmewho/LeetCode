class Solution {
public:
    string removeKdigits(string num, int k) {
        string ans;

        vector<char> stk;
        for(char ch: num) {
            while( !stk.empty() && stk.back() > ch && k > 0) {
                stk.pop_back();
                k--;
            }
            stk.emplace_back(ch);
        }
        
        while( k ) {
            stk.pop_back();
            k--;
        }

        int i = 0;
        while(i < stk.size() && stk[i] == '0' ) i++;

        while( i < stk.size() ) ans += stk[i++];

        return ans == "" ? "0" : ans;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        string num = stringToString(line);
        getline(cin, line);
        int k = stringToInteger(line);
        
        string ret = Solution().removeKdigits(num, k);

        string out = (ret);
        cout << out << endl;
    }
    return 0;
}
