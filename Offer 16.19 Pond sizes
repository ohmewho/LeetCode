class DisjointSetUnion {    

public:
    vector<int> parent;
    vector<bool> isWater;
    DisjointSetUnion(int n): parent(vector<int>(n, -1)), isWater(vector<bool>(n, false)) {};

    int findparent(int idx) {
        if(parent[idx] < 0) return idx;
        return parent[idx] = findparent(parent[idx]);
    }

    bool unify(int x, int y) {
        int rx = findparent(x), ry = findparent(y);
        if(rx == ry) return false;

        if(parent[rx] < parent[ry]) {
            parent[rx] += parent[ry];
            parent[ry] = rx;
        }
        else {
            parent[ry] += parent[rx];
            parent[rx] = ry;
        }
        return true;
    }

};

class Solution {

public:
    vector<tuple<int, int>> dir = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1},{1, -1}, {1, 0}, {1, 1}};

    int dfshelper(vector<vector<int>>& land, vector<vector<int>>& visited, int row, int col) {  
        int m = land.size(), n = land[0].size();
        if(row < 0 || col < 0 || row >= m || col >= n || visited[row][col] || land[row][col]) return 0;

        visited[row][col] = 1;
        int ans = 1;
        
        for(auto [dr, dc]: dir) {
            int nr = row + dr, nc = col + dc;
            ans += dfshelper(land, visited, nr, nc);
        }
        return ans;
    }

    vector<int> dfs(vector<vector<int>>& land) {
        vector<int> ans;
        int row = land.size(), col = land[0].size();
        vector<vector<int>> visited(row, vector<int> (col, 0));

        for(int r = 0; r < row; r++) {
            for(int c = 0; c < col; c++) {
                if(!visited[r][c] && !land[r][c]) {
                    ans.emplace_back(dfshelper(land, visited, r, c));
                }
            }
        }

        sort(ans.begin(), ans.end());
        return ans;
    } 

    vector<int> bfs(vector<vector<int>>& land) {
        vector<int> ans;
        int row = land.size(), col = land[0].size();
        vector<vector<int>> visited(row, vector<int> (col, 0));

        for(int r = 0; r < row; r++) {
            for(int c = 0; c < col; c++) {
                if(!visited[r][c] && !land[r][c]) {
                    int area = 1;
                    visited[r][c] = 1;
                    queue<tuple<int, int>> que;
                    que.emplace(make_tuple(r, c));
                    
                    while(que.size()) {
                        auto [x, y] = que.front(); que.pop();
                        for(auto [dx, dy]: dir) {
                            int nx = x + dx, ny= y + dy;
                            if(nx >= 0 && nx < row && ny >= 0 && ny < col && !visited[nx][ny] && !land[nx][ny]) {
                                que.emplace(make_tuple(nx, ny));
                                visited[nx][ny] = 1;
                                area++;
                            }
                        }
                    }

                    ans.emplace_back(area);
                }
            }
        }

        sort(ans.begin(), ans.end());
        return ans;
    }

    vector<int> unionfind(vector<vector<int>>& land) {
        vector<int> ans;
        int row = land.size(), col = land[0].size(); 
        DisjointSetUnion dsu = DisjointSetUnion(row * col);

        for(int r = 0; r < row; r++) {
            for(int c = 0; c < col; c++) {
                if(!land[r][c]) {
                    dsu.isWater[r * col + c] = true;
                    for(auto [nr, nc]: vector<tuple<int, int>> {{r - 1, c - 1}, {r - 1, c}, {r - 1, c + 1}, {r, c - 1} }) {
                        if(nr >= 0 && nr < row && nc >= 0 && nc < col && !land[nr][nc]) dsu.unify(r * col + c, nr * col + nc);
                    }
                }
            }
        }

        for(int i = 0; i < row * col; i++) if(dsu.isWater[i] && dsu.parent[i] < 0) ans.emplace_back(-dsu.parent[i]); 

        sort(ans.begin(), ans.end());
        return ans;
    }
    vector<int> pondSizes(vector<vector<int>>& land) {
        return bfs(land);
        //return dfs(land);
        //return unionfind(land);
    }
};
