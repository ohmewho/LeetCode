class Solution {
public:
    int n;

    bool check(vector<int>& bloomDay, int m, int k, int days) {
        int flowers = 0, bouquet = 0;
        for(int b: bloomDay) {
            if(b <= days) {
                flowers++;
                if(flowers == k) {
                    bouquet++;
                    flowers = 0;
                }
            }
            else flowers = 0;   
        }
        return bouquet >= m;
    }

    int solve(vector<int>& bloomDay, int m, int k) {

        if(n < m * k) return -1;

        int left = *min_element(bloomDay.begin(), bloomDay.end()), \
        right = *max_element(bloomDay.begin(), bloomDay.end()), mid;

        int ans;
        while(left <= right) {
            mid = left + (right - left) / 2;
            if(check(bloomDay, m, k, mid)) {
                ans = mid;
                right = mid - 1;
            }
            else left = mid + 1;
        }
        return ans;
    }

    int solve1(vector<int>& bloomDay, int m, int k) {

        if(n < m * k) return -1;

        int left = *min_element(bloomDay.begin(), bloomDay.end()), \
        right = *max_element(bloomDay.begin(), bloomDay.end()), mid;

        while(left < right) {
            mid = left + (right - left) / 2;
            if(check(bloomDay, m, k, mid)) right = mid; 
            else left = mid + 1;
        }
        return left;
    }

    int minDays(vector<int>& bloomDay, int m, int k) {
        n = bloomDay.size();

        return solve1(bloomDay, m, k);

    }
};
