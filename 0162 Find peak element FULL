class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int pre = INT_MIN, tail = INT_MIN, ans = 0, n = nums.size();
/****
        if(n == 1) ans = 0;
        else {
            printf("n = %d\n", n);
            for(int i = 0; i < n; i++) {
                //printf("i = %d, nums[%d] = %d, nums[%d] = %d\n", i, i, nums[i], i + 1, nums[i + 1]);
                if(i == 0) {
                    if( nums[i] > pre && nums[i] > nums[i + 1] ) {
                        //printf("i = %d\n", i);
                        ans = i;
                        break;
                    }
                }

                else if( i == n - 1 ) {
                    if( nums[i] > tail && nums[i] > nums[i - 1] ) {
                        ans = i;
                        break;
                    }
                }

                else {
                    if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {
                        //printf("i = %d\n", i);
                        ans = i;
                        break;
                    }
                }
            }
        }
****/
/***
        int i;
        for(i = 0; i < n - 1; i++) {
            if( nums[i] > nums[i + 1] ) break;
        }
***/

        int l = 0, r = n - 1, mid;
        while(l < r) {

            mid = l + ( r - l ) / 2;
            if( nums[mid] > nums[mid + 1]) r = mid;
            else l = mid + 1;
        }
        return l;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        int ret = Solution().findPeakElement(nums);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
