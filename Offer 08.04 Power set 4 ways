class Solution {
public:
    vector<vector<int>> ans;
    vector<int> curr;
    void backtracking(vector<int>& nums, int curr_idx) {
        
        ans.emplace_back(curr);
        for(int i = curr_idx; i < nums.size(); i++) {
            curr.emplace_back(nums[i]);
            backtracking(nums, i + 1);
            curr.pop_back();
        }
    }

    void backtracking1(vector<int>& nums, int start_idx) {
        if(start_idx == nums.size()) {
            ans.emplace_back(curr);
            return;
        }
        curr.emplace_back(nums[start_idx]);
        backtracking1(nums, start_idx + 1);
        curr.pop_back();
        backtracking1(nums, start_idx + 1);
    }

    void iterate(vector<int>& nums) {
        ans = {{}};
        for(int i = 0; i < nums.size(); i++) {
            int curr_size = ans.size();
            for(int j = 0; j < curr_size; j++) {
                auto temp = ans[j];
                temp.emplace_back(nums[i]);
                ans.emplace_back(temp);
            }
        }
    }

    void bitwise(vector<int>& nums) {
        int n = nums.size();
        for(int i = 0; i < ( 1 << n); i++) {
            curr.clear();
            for(int j = 0; j < n; j++) {
                if( (1 << j) & i ) curr.emplace_back(nums[j]);
            }
            ans.emplace_back(curr);
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        //backtracking(nums, 0);
        //backtracking1(nums, 0);
        //iterate(nums);
        bitwise(nums);
        return ans;
    }
};
