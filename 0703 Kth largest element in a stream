class KthLargest {
private:
    int K;
    priority_queue<int, vector<int>, greater<int>> minHeap;
public:
    KthLargest(int k, vector<int>& nums) {
        K = k;
        minHeap = priority_queue<int, vector<int>, greater<int>>(nums.begin(), nums.end());
        while(minHeap.size() > K) minHeap.pop();


        // for(int i = 0; i < nums.size(); i++) {
        //     if(minHeap.size() < K) minHeap.push(nums[i]);
        //     else if(nums[i] > minHeap.top()) {
        //         minHeap.push(nums[i]);
        //         minHeap.pop();
        //     }
        // }


    }
    
    int add(int val) {
        minHeap.push(val);
        if(minHeap.size() > K) minHeap.pop();
        return minHeap.top();


        // if(minHeap.size() < K) minHeap.push(val);
        // else if(val > minHeap.top()) {
        //     minHeap.push(val);
        //     minHeap.pop();
        // }
        // return minHeap.top();
    }
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */
