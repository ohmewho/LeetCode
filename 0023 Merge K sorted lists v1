/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    // void printList(ListNode* l) {
    //     int i = 0;
    //     while(l) {
    //         if(i) printf(" ");
    //         printf("%d", l->val);
    //         l = l->next;
    //         i++;
    //     }
    //     printf("\n");
    // }
public:

    ListNode* merge2Lists(ListNode* l1, ListNode* l2) {
        if(!l2) return l1;
        if(!l1) return l2;
        
        if(l1->val <= l2->val) {
            l1->next =  merge2Lists(l1->next, l2);
            return l1;
        }
        else {
            l2->next = merge2Lists(l2->next, l1);
            return l2;
        }
    }

    ListNode* dcMerge(vector<ListNode*>& lists, int left, int right) {
        if(left == right) return lists[left];
        int mid = left + (right - left) / 2;
        ListNode* l1 = dcMerge(lists, left, mid);
        ListNode* l2 = dcMerge(lists, mid + 1, right);
        return merge2Lists(l1, l2);
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(!lists.size()) return nullptr;
        return dcMerge(lists, 0, lists.size() - 1);
    }
};
