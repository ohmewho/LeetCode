class Solution {
using PSI = pair<string, int>;

public:
    vector<string> solve(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {
        vector<string> ans;
        vector<int> fidx;

        int n = watchedVideos.size();

        int visited[n];
        memset(visited, 0, sizeof(visited));

        queue<int> que;
        que.emplace(id);
        visited[id] = 1;
        
        while(level) {
            level--;
            int size = que.size();
            for(int i = 0; i < size; i++) {
                int curr = que.front(); que.pop();
                
                for(int f: friends[curr]) {
                    if(!visited[f]) {
                        que.emplace(f);
                        visited[f] = 1;
                    }
                }
            }
        }

        unordered_map<string, int> vidfreq;
        while(que.size()) {
            int f = que.front(); que.pop();
            for(const string& wv: watchedVideos[f]) {
                vidfreq[wv]++;
            }
        }

        for(auto [vid, freq]: vidfreq) ans.emplace_back(vid);

        sort(ans.begin(), ans.end(), [&](string a, string b) {
            return vidfreq[a] < vidfreq[b] || (vidfreq[a] == vidfreq[b] && a < b);
        });

        return ans;
    }

    vector<string> solve1(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {
        vector<string> ans;
        vector<int> fidx;

        int n = watchedVideos.size();

        int visited[n];
        memset(visited, 0, sizeof(visited));

        queue<int> que;
        que.emplace(id);
        visited[id] = 1;
        
        while(level) {
            level--;
            int size = que.size();
            for(int i = 0; i < size; i++) {
                int curr = que.front(); que.pop();
                
                for(int f: friends[curr]) {
                    if(!visited[f]) {
                        que.emplace(f);
                        visited[f] = 1;
                    }
                }
            }
        }

        unordered_map<string, int> vidfreq;
        while(que.size()) {
            int f = que.front(); que.pop();
            for(const string& wv: watchedVideos[f]) {
                vidfreq[wv]++;
            }
        }

        vector<PSI> psivec(vidfreq.begin(), vidfreq.end());

        sort(psivec.begin(), psivec.end(), [](PSI& a, PSI& b) {
            return a.second < b.second || (a.second == b.second && a.first < b.first);
        });

        for(PSI& p: psivec) ans.emplace_back(p.first);
        return ans;
    }

    vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {
        return solve1(watchedVideos, friends, id, level);
    }
};
