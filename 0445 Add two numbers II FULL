/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> stk1, stk2;
        while(l1) {
            stk1.emplace(l1->val);
            l1 = l1->next;
        }
        while(l2) {
            stk2.emplace(l2->val);
            l2 = l2->next;
        }

        ListNode* ans = NULL;

        int sum, num1, num2, carry = 0;
        while( !stk1.empty() || !stk2.empty() || carry ) {
            // num1 = stk1.empty() ? 0 : stk1.top();
            // num2 = stk2.empty() ? 0 : stk2.top();
            // if( !stk1.empty() ) stk1.pop();
            // if( !stk2.empty() ) stk2.pop();
            if( stk1.empty() ) num1 = 0;
            else {
                num1 = stk1.top();
                stk1.pop();
            }

            if( stk2.empty() ) num2 = 0;
            else {
                num2 = stk2.top();
                stk2.pop();
            }

            sum = num1 + num2 + carry;
            carry = sum / 10;
            sum = sum % 10;

            ListNode* newnode = new ListNode(sum);
            newnode->next = ans;
            ans = newnode;
        }

        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

ListNode* stringToListNode(string input) {
    // Generate list from the input
    vector<int> list = stringToIntegerVector(input);

    // Now convert that list into linked list
    ListNode* dummyRoot = new ListNode(0);
    ListNode* ptr = dummyRoot;
    for(int item : list) {
        ptr->next = new ListNode(item);
        ptr = ptr->next;
    }
    ptr = dummyRoot->next;
    delete dummyRoot;
    return ptr;
}

string listNodeToString(ListNode* node) {
    if (node == nullptr) {
        return "[]";
    }

    string result;
    while (node) {
        result += to_string(node->val) + ", ";
        node = node->next;
    }
    return "[" + result.substr(0, result.length() - 2) + "]";
}

int main() {
    string line;
    while (getline(cin, line)) {
        ListNode* l1 = stringToListNode(line);
        getline(cin, line);
        ListNode* l2 = stringToListNode(line);
        
        ListNode* ret = Solution().addTwoNumbers(l1, l2);

        string out = listNodeToString(ret);
        cout << out << endl;
    }
    return 0;
}
