class Solution {
public:
    vector<int> shifts;
    void getshifts(string pattern) {
        int n = pattern.length();

        shifts.resize(n);
        int nidx = -1;
        shifts[0] = nidx;
        for(int pos = 1; pos < n; pos++) {
            while(nidx >= 0 && pattern[pos] != pattern[nidx + 1]) nidx = shifts[nidx];
            if(pattern[pos] == pattern[nidx + 1]) nidx++;
            shifts[pos] = nidx;
        }
    }

    bool kmp(string str, string ptn) {
        getshifts(ptn);
        int pidx = -1;
        for(int i = 0; i < str.length(); i++) {
            while(pidx >= 0 && str[i] != ptn[pidx + 1]) pidx = shifts[pidx];
            if(str[i] == ptn[pidx + 1]) pidx++;
            if(pidx == ptn.length() - 1) return true; 
        }
        return false;
    }
    bool rotateString(string A, string B) {
        if(A.length() != B.length()) return false;

        //return (A + A).find(B) != string::npos;

        if(A.length() < 1) return true;
        return kmp(A + A, B);
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        string A = stringToString(line);
        getline(cin, line);
        string B = stringToString(line);
        
        bool ret = Solution().rotateString(A, B);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
