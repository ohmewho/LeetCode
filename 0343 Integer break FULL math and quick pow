class Solution {
public:
    long long myPow(int x, int n) {
        long long ans = 1;
        n = abs(n);
        while(n) {
            if( n & 1) {
                ans *= (long long)x;
            }
            x *= (long long)x;
            n = (n >> 1);
        }
        return ans;
    }
    int integerBreak(int n) {
        if(n <= 3) return n - 1;

        int quotient = n / 3, remainder = n % 3;
        //printf(" rem = %d, pow = %d\n", remainder, myPow(3, quotient));

        if( remainder == 0 ) return (int)myPow(3, quotient);
        else if( remainder == 1 ) return (int)myPow(3, quotient - 1) * 4; 
        else return (int)myPow(3, quotient) * 2;
    }
};

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        int n = stringToInteger(line);
        
        int ret = Solution().integerBreak(n);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
