class Solution {
public:
    int maxDistToClosest(vector<int>& seats) {
        int n = seats.size();
        vector<int> left(n, n), right(n, n);

        for(int i = 0; i < n; i++) {
            if( seats[i] )  left[i] = 0;
            else if( i > 0) left[i] = left[i - 1] + 1;    
        }

        for(int i = n - 1; i >= 0; i--) {
            if( seats[i] ) right[i] = 0;
            else if( i < n - 1) right[i] = right[i + 1] + 1;
            
        }

        int ans = -1;
        for( int i = 0; i < n; i++) {
            //printf("left = %d, right = %d\n", left[i], right[i]);
            ans = max(ans, min(left[i], right[i]));
        }

        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> seats = stringToIntegerVector(line);
        
        int ret = Solution().maxDistToClosest(seats);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
