class Solution {
public:
    int atMostK(vector<int>& tree, int bound) {
        int left = 0, right = 0, ans = 0;
        unordered_map<int, int> numfreq;
        while(right < tree.size()) {
            numfreq[tree[right]]++;

            while(numfreq.size() > bound) {
                numfreq[tree[left]]--;
                if(numfreq[tree[left]] == 0) numfreq.erase(tree[left]);
                left++;
            }
            ans = max(ans, right - left + 1);
            right++;
        }
        return ans;
    }

    int totalFruit(vector<int>& tree) {
        return atMostK(tree, 2);
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> tree = stringToIntegerVector(line);
        
        int ret = Solution().totalFruit(tree);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
