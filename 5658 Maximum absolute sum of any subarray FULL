class Solution {
public:
    int maxAbsoluteSum(vector<int>& nums) {
        int curr_max_sum = 0, max_sum = 0, min_sum = 0, curr_min_sum = 0;

        for(int n: nums) {
            curr_max_sum += n;
            curr_min_sum += n;

            if(curr_max_sum < 0) curr_max_sum = 0;
            else max_sum = max(max_sum, curr_max_sum);

            if(curr_min_sum > 0) curr_min_sum = 0;
            else min_sum = min(min_sum, curr_min_sum);
        }

        //printf("max_sum = %d, min_sum = %d\n", max_sum, min_sum);

        return max(abs(min_sum), abs(max_sum));
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        int ret = Solution().maxAbsoluteSum(nums);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
