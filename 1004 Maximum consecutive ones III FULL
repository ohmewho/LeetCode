class Solution {
public:
    int longestOnes(vector<int>& A, int K) {
        int left = 0, right = 0, n = A.size(), ans = 0, zeros = 0;

/***
        while(right < n) {
            
            if(A[right] == 0) zeros++;
            right++;

            while(zeros > K) {
                if(A[left] == 0) zeros--;
                left++;
            }
            ans = max(ans, right - left);
            //printf("left = %d\n", left);    
        }
***/
        int r_zeors = 0, l_zeros = 0;
        while(right < n) {

            r_zeors += 1 - A[right++];

            while(l_zeros + K < r_zeors) {
                l_zeros += 1 - A[left];
                left++;
            }

            ans = max(ans, right - left);
        }

        return ans;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int stringToInteger(string input) {
    return stoi(input);
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> A = stringToIntegerVector(line);
        getline(cin, line);
        int K = stringToInteger(line);
        
        int ret = Solution().longestOnes(A, K);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
