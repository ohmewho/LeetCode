class MyQueue {
private:
    stack<int> pushstack, popstack;
    void push2pop() {
        while( !pushstack.empty() ) {
            int num = pushstack.top();
            pushstack.pop();
            popstack.emplace(num);
        }
    }
public:
    /** Initialize your data structure here. */
    MyQueue() {}
    
    /** Push element x to the back of queue. */
    void push(int x) {
        pushstack.emplace(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int num;
        if( popstack.empty() ) push2pop();
        num = popstack.top();
        popstack.pop();
        return num;    
    }
    
    /** Get the front element. */
    int peek() {
        int num = this->pop();
        popstack.emplace(num);
        return num;
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return pushstack.empty() && popstack.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
