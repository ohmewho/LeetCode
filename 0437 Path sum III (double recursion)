/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int dfshelper(TreeNode* root, int targetSum) {
        if(!root) return 0;

        int count = 0;
        if(root->val == targetSum) count++;

        count += dfshelper(root->left, targetSum - root->val);
        count += dfshelper(root->right, targetSum - root->val);

        return count;
    }

    int solvedfs(TreeNode* root, int targetSum) {
        int ans = 0;
        if(root) ans = solvedfs(root->left, targetSum) + dfshelper(root, targetSum) + solvedfs(root->right, targetSum);

        return ans;
    }

    unordered_map<int, int> sumfreq;
    int currsum, ansfreq;

    void presumhelper(TreeNode* root, int targetSum) {
        if(!root) return;

        currsum += root->val;
        sumfreq[currsum]++;
        if(sumfreq.find(currsum - targetSum) != sumfreq.end()) ansfreq += sumfreq[currsum - targetSum];

        presumhelper(root->left, targetSum);
        presumhelper(root->right, targetSum);

        sumfreq[currsum]--;
        currsum -= root->val;    
    }

    int solvepresum(TreeNode* root, int targetSum) {
        currsum = 0, ansfreq = 0;
        sumfreq[0] = 1;
        return solvedfs(root, targetSum);
    }

    int pathSum(TreeNode* root, int targetSum) {
        
        //return solvedfs(root, targetSum);
        return solvepresum(root, targetSum);
    }
};
